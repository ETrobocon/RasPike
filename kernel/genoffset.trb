# -*- coding: utf-8 -*-
# 
#   TOPPERS/ASP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2011-2016 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
#  
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
#  
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: genoffset.trb 662 2016-02-27 02:33:51Z ertl-hiro $
# 

#
#		オフセットファイル生成用の生成スクリプト
#

# 
#  タイムスタンプファイルの指定
# 
$timeStampFileName = "offset.timestamp"

# 
#  offset.hの先頭部分の生成
# 
$offsetH = GenFile.new("offset.h")
$offsetH.add2("/* offset.h */")

# 
#  #defineディレクティブの生成
# 
def GenerateDefine(symbol, value)
  $offsetH.add("#define #{symbol}\t#{value}")
end

# 
#  ビットのサーチ
# 
def SearchBit(val)
  (0..7).each do |valBit|
    if (val & 1) != 0
      return valBit
    end
    val >>= 1
  end
end

# 
#  ビットフィールドのオフセットとビット位置の定義の生成
# 
def GenerateDefineBit(label, structSize, outputSize)
  top = SYMBOL(label)
  if top.nil?
    error_exit("label `#{label}' not found")
  else
    val = 0
    offset = 0
    0.upto(structSize - 1).each do |i|
      tmpVal = PEEK(top + i, 1)
      if tmpVal != 0
        val = tmpVal
        offset = i
        break
      end
    end

    if val == 0
      error_exit("bit not found in `#{label}'")
    else
      valBit = SearchBit(val)
      case outputSize
      when "W"
        if $SIL_ENDIAN_BIG
          valBit = valBit + 24 - ((offset & 0x03) << 3)
        else
          valBit = valBit + ((offset & 0x03) << 3)
        end
        offset &= ~0x03
      when "H"
        if $SIL_ENDIAN_BIG
          valBit = valBit + 8 - ((offset & 0x01) << 3)
        else
          valBit = valBit + ((offset & 0x01) << 3)
        end
        offset &= ~0x01
      end
    end

    $offsetH.add("#define #{label}\t#{offset}")
    $offsetH.add("#define #{label}_bit\t#{valBit}")
    $offsetH.add("#define #{label}_mask\t#{sprintf("0x%x", 1 << valBit)}")
  end
end

# 
#  バイト配置のチェック
# 
def magicCheck(size, check)
  label = "MAGIC_#{size}"
  top = SYMBOL(label)
  if top.nil?
    error_exit("label `#{label}' not found")
  else
    1.upto(size).each do |offset|
      if $SIL_ENDIAN_BIG
        val = PEEK(top + offset - 1, 1)
      else
        val = PEEK(top + size - offset, 1)
      end
      if val != check.at(offset - 1)
        error_exit("value check of `#{label}' failed")
      end
    end
  end
end

magicCheck(1, [ 0x12 ])
magicCheck(2, [ 0x12, 0x34 ])
magicCheck(4, [ 0x12, 0x34, 0x56, 0x78 ])
