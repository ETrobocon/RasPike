#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class C_parser < Racc::Parser

module_eval(<<'...end C_parser.y.rb/module_eval...', 'C_parser.y.rb', 770)

  RESERVED = {
    # keyword
    'typedef' => :TYPEDEF,
    'struct' => :STRUCT,
    'union' => :UNION,
    'sizeof' => :SIZEOF,
    'throw' => :THROW,

    # specifier
    # types
    'void'    => :VOID,
    'char'    => :CHAR,
    'short'   => :SHORT,

    'volatile'=> :VOLATILE,
    'const'   => :CONST,
    'extern'   => :EXTERN,

    'long'    => :LONG,
    'float'   => :FLOAT,
    'double'  => :DOUBLE,
    'signed'  => :SIGNED,
    'unsigned'=> :UNSIGNED,

    'int'     => :INT,
    'enum'    => :ENUM,

    'if'      => :IF,
    'else'    => :ELSE,
    'while'   => :WHILE,
    'do'      => :DO,
    'for'     => :FOR,
    'case'    => :CASE,
    'default' => :DEFAULT,
    'goto'    => :GOTO,
    'continue' => :CONTINUE,
    'break'   => :BREAK,
    'return'  => :RETURN,
    '__inline__'  => :__INLINE__,
    'inline'  => :INLINE,
    '__inline'  => :__INLINE,
    'Inline'  => :CINLINE,        # inline starting with Capital letter
    'static'  => :STATIC,
    'register' => :REGISTER,
    'auto'    => :AUTO,
    '__extension__'    => :EXTENSION,
    '__asm__' => :_ASM,

    '__int64' => :INT64,         # MS extension. unsigned __int64_t も使用できる
    '_Bool' => :BOOL             # MS extension

  }

  @@generator_nest = -1
  @@generator_stack = []
  @@current_locale = []

  def finalize

    # mikan Namespace.pop
    Celltype.pop
    Cell.pop
    CompositeCelltype.pop
    Region.pop

  end

  def set_plugin( plugin )
    @plugin = plugin
  end

  def self.get_plugin
    @@generator_stack[@@generator_nest].get_plugin
  end

  def get_plugin
    @plugin
  end

  def parse(files)

    # mikan Namespace.push
    Celltype.push
    Cell.push
    CompositeCelltype.push
    Region.push

    @@generator_nest += 1
    @@generator_stack[@@generator_nest] = self
    @b_no_type_name = false

   begin

    @q = []

    # typedef, struct のみ
    @in = false   # typedef, struct の途中
    @count = 0
    @prev_block_end = true

    comment = false
#    b_asm   = false

    # 800U, 0xffLL など (整数リテラルに共通の修飾子)
    integer_qualifier = "([Uu][Ll][Ll]|[Uu][Ll]|[Uu]|[Ll][Ll]|[Ll])?"

    files.each {|file|
      lineno = 1
     begin
#2.0       IO.foreach(file) {|line|
       TECSIO.foreach(file) {|line|
        col = 1
        line.rstrip!

        until line.empty?

          if comment
            case line
            # コメント終了
            when /\A\*\//
              comment = false
            when /\A./
              ;
            end
          else
            case line
            # 空白、プリプロセスディレクティブ
            when /\A\s+/
              ;
            # 識別子
            when /\A[a-zA-Z_]\w*/
              word = $&
              @q << [RESERVED[word] || :IDENTIFIER, Token.new(word.intern, file, lineno, col)]
            # 16 進数定数
            when /\A0x[0-9A-Fa-f]+#{integer_qualifier}/
              @q << [:HEX_CONSTANT, Token.new($&, file, lineno, col)]
            # 8 進数定数
            when /\A0[0-7]+#{integer_qualifier}/
              @q << [:OCTAL_CONSTANT, Token.new($&, file, lineno, col)]
            # 浮動小数定数
            when /\A[0-9]+\.([0-9]*)?([Ee][+-]?[0-9]+)?/
              @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
            # 整数定数
            when /\A\d+#{integer_qualifier}/
            # when /\A\d+/
              @q << [:INTEGER_CONSTANT, Token.new($&.to_i, file, lineno, col)]
            # 文字
            when /\A'(?:[^'\\]|\\.)'/
              @q << [:CHARACTER_LITERAL, Token.new($&, file, lineno, col)]
            # 文字列
#              "#include  #include #include \"../systask/logtask.cfg\"       最後の " 忘れ)で無限ループ
#            when /\A"(?:[^"\\]+|\\.)*"/
            when /\A"(?:[^"\\]|\\.)*"/   # これはうまく行くようだ
              @q << [:STRING_LITERAL, Token.new($&, file, lineno, col)]
            # 行コメント
            when /\A\/\/.*$/
              # 読み飛ばすだけ
            # コメント開始
            when /\A\/\*/
              comment = true
            when /\A>>=/, /\A<<=/, /\A>>/,  /\A<</
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A\+=/, /\A\-=/, /\A\*=/, /\A\/=/, /\A%=/, /\A&=/, /\A\|=/, /\A\^=/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A::/, /\A==/, /\A!=/, /\A>=/, /\A<=/, /\A\->/, /\A\+\+/, /\A\-\-/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A\|\|/, /\A\&\&/
              @q << [$&, Token.new($&, file, lineno, col)]
            when /\A./
              @q << [$&, Token.new($&, file, lineno, col)]
            else
              raise
            end
          end

          line = $'
          col += $&.length
        end

        lineno += 1
      }

     rescue => evar
       Generator.error( "B1002 while open or reading \'$1\'" , file )
       print_exception( evar )
     end
    }

    # 終了の印
    @q << nil

    @yydebug = true
    do_parse

   ensure
    @@generator_nest -= 1
   end

  end


  def next_token
    token = @q.shift
    # typedef, struct の宣言文のみ評価する
    if @in then
      @prev_block_end = false
      # ':' で 文の終わり
      if token[0] == '{' then
        @count += 1
      elsif token[0] == '}' then
        @count -= 1
      elsif token[0] == ';' && @count == 0 then
         @in = false
         @prev_block_end = true
      else
      end
    else
      while token
        if ( token[0] == :TYPEDEF || token[0] == :STRUCT ) && @prev_block_end == true then
          @in = true
          @prev_block_end = false
          break
        end
        if token[0] == ';' || token[0] == '}' then
          @prev_block_end = true
        else
          @prev_block_end = false
        end
        token = @q.shift
      end
    end

    if token then
      @@current_locale[@@generator_nest] = token[1].locale

      case token[1].val
      when ";", ":", ",", "(", ")", "{", "}"
        set_no_type_name false
      when ".", "->"
        set_no_type_name true
      end

      # TYPE_NAME トークンへ置き換え
      if @b_no_type_name == false
        if token[0] == :IDENTIFIER && Namespace.is_typename?( token[1].val ) then
          token[0] = :TYPE_NAME
          locale = @@current_locale[@@generator_nest]
#print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}: type_name'\n" )
        end
      end

      if $debug then     # 070107 token 無効時ここを通さないようした (through 対応 -d の時に例外発生) 
        locale = @@current_locale[@@generator_nest]
        if token then
          print( "#{locale[0]}: line #{locale[1]} : #{token[0]} '#{token[1].val}'\n" )
        else
          print( "#{locale[0]}: line #{locale[1]} : EOF\n" )
        end
      end
    end

    token
  end

  def on_error(t, v, vstack)
    if v == "$" then
     Generator.error( "B1003 Unexpected EOF"  )
    else
     Generator.error( "B1004 syntax error near \'$1\'" , v.val )
    end

  end

  def self.current_locale
    @@current_locale[ @@generator_nest ]
  end

  def self.get_nest
    @@generator_nest
  end

  def set_no_type_name b_no_type_name
    # locale = @@current_locale[ @@generator_nest ]
    # print "b_no_type_name=#{b_no_type_name} #{locale[0]}: line #{locale[1]}\n"
    @b_no_type_name = b_no_type_name
  end

...end C_parser.y.rb/module_eval...
##### State transition tables begin ###

clist = [
'110,111,112,113,114,116,294,117,284,295,295,250,410,122,123,82,82,295',
'121,124,125,126,127,128,129,48,56,110,111,112,113,114,116,372,117,70',
'390,275,147,69,122,123,80,283,386,121,124,125,126,127,128,129,254,9',
'10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37',
'38,33,34,71,251,252,255,72,256,257,258,259,260,261,262,263,148,264,110',
'111,112,113,114,116,423,117,181,295,293,250,296,122,123,82,304,295,121',
'124,125,126,127,128,129,148,403,110,111,112,113,114,116,86,117,305,85',
'295,147,306,122,123,73,180,332,121,124,125,126,127,128,129,254,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38',
'267,101,266,251,252,255,287,256,257,258,259,260,261,262,263,148,264',
'110,111,112,113,114,116,424,117,358,79,265,250,235,122,123,82,234,295',
'121,124,125,126,127,128,129,148,426,110,111,112,113,114,116,353,117',
'229,352,295,147,353,122,123,352,357,78,121,124,125,126,127,128,129,254',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36',
'37,38,228,101,227,251,252,255,361,256,257,258,259,260,261,262,263,148',
'264,110,111,112,113,114,116,402,117,366,299,226,250,273,122,123,82,295',
'295,121,124,125,126,127,128,129,148,399,110,111,112,113,114,116,367',
'117,183,86,368,147,85,122,123,218,219,368,121,124,125,126,127,128,129',
'254,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35',
'36,37,38,182,101,80,251,252,255,362,256,257,258,259,260,261,262,263',
'148,264,110,111,112,113,114,116,404,117,290,291,101,250,178,122,123',
'82,331,295,121,124,125,126,127,128,129,148,333,110,111,112,113,114,116',
'301,117,216,217,213,147,335,122,123,214,215,336,121,124,125,126,127',
'128,129,254,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32',
'33,34,35,36,37,38,176,177,337,251,252,255,338,256,257,258,259,260,261',
'262,263,148,264,110,111,112,113,114,116,101,117,224,225,340,250,341',
'122,123,82,216,217,121,124,125,126,127,128,129,148,342,110,111,112,113',
'114,116,343,117,329,330,213,147,169,122,123,214,215,168,121,124,125',
'126,127,128,129,254,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29',
'31,32,33,34,35,36,37,38,218,219,3,251,252,255,359,256,257,258,259,260',
'261,262,263,148,264,110,111,112,113,114,116,56,117,218,219,159,250,370',
'122,123,82,230,231,121,124,125,126,127,128,129,148,371,110,111,112,113',
'114,116,226,117,218,219,227,147,228,122,123,145,421,229,121,124,125',
'126,127,128,129,254,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29',
'31,32,33,34,35,36,37,38,218,219,375,251,252,255,377,256,257,258,259',
'260,261,262,263,148,264,110,111,112,113,114,116,102,117,411,412,146',
'250,101,122,123,82,253,98,121,124,125,126,127,128,129,148,382,110,111',
'112,113,114,116,420,117,216,217,213,147,385,122,123,214,215,387,121',
'124,125,126,127,128,129,254,9,10,11,12,13,14,15,16,17,18,19,20,21,22',
'23,27,29,31,32,33,34,35,36,37,38,285,286,388,251,252,255,389,256,257',
'258,259,260,261,262,263,148,264,110,111,112,113,114,116,92,117,224,225',
'91,250,394,122,123,82,90,364,121,124,125,126,127,128,129,148,364,110',
'111,112,113,114,116,418,117,405,408,409,147,82,122,123,67,64,63,121',
'124,125,126,127,128,129,254,9,10,11,12,13,14,15,16,17,18,19,20,21,22',
'23,27,29,31,32,33,34,35,36,37,38,422,429,276,251,252,255,,256,257,258',
'259,260,261,262,263,148,264,110,111,112,113,114,116,,117,,,,250,,122',
'123,82,,,121,124,125,126,127,128,129,148,,110,111,112,113,114,116,,117',
',,,147,,122,123,,,,121,124,125,126,127,128,129,254,9,10,11,12,13,14',
'15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,,,,251,252',
'255,,256,257,258,259,260,261,262,263,148,264,110,111,112,113,114,116',
',117,,,,250,,122,123,82,,,121,124,125,126,127,128,129,148,,110,111,112',
'113,114,116,,117,,,,147,,122,123,,,,121,124,125,126,127,128,129,254',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36',
'37,38,,254,,251,252,255,,256,257,258,259,260,261,262,263,148,264,110',
'111,112,113,114,116,,117,,,,250,,122,123,82,,,121,124,125,126,127,128',
'129,148,,110,111,112,113,114,116,,117,,,,147,,122,123,,,,121,124,125',
'126,127,128,129,254,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29',
'31,32,33,34,35,36,37,38,,254,,251,252,255,,256,257,258,259,260,261,262',
'263,148,264,110,111,112,113,114,116,,117,,,,147,,122,123,,,,121,124',
'125,126,127,128,129,148,110,111,112,113,114,116,269,117,,273,55,147',
'54,122,123,,54,,121,124,125,126,127,128,129,56,254,9,10,11,12,13,14',
'15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,110,111,112',
'113,114,116,,117,,,,147,,122,123,148,,84,121,124,125,126,127,128,129',
'110,111,112,113,114,116,,117,,,,147,,122,123,145,148,,121,124,125,126',
'127,128,129,110,111,112,113,114,116,,117,,55,55,147,,122,123,54,54,',
'121,124,125,126,127,128,129,56,110,111,112,113,114,116,,117,,,55,147',
',122,123,,54,148,121,124,125,126,127,128,129,56,,146,,,110,111,112,113',
'114,116,,117,,,,147,148,122,123,,84,,121,124,125,126,127,128,129,110',
'111,112,113,114,116,,117,,,55,147,148,122,123,,54,,121,124,125,126,127',
'128,129,56,110,111,112,113,114,116,,117,,,,147,148,122,123,145,,,121',
'124,125,126,127,128,129,110,111,112,113,114,116,,117,,,,147,,122,123',
',,148,121,124,125,126,127,128,129,110,111,112,113,114,116,,117,,,55',
'147,299,122,123,273,54,148,121,124,125,126,127,128,129,56,,56,146,,',
'110,111,112,113,114,116,,117,,,,147,148,122,123,,,,121,124,125,126,127',
'128,129,269,55,55,273,55,,54,54,54,,54,,148,,,56,56,56,,56,110,111,112',
'113,114,116,,117,,,55,147,,122,123,,54,148,121,124,125,126,127,128,129',
'56,220,221,222,223,,110,111,112,113,114,116,,117,,,55,147,,122,123,',
'54,148,121,124,125,126,127,128,129,56,13,14,15,16,17,18,19,20,21,22',
'23,27,29,31,32,33,34,,,110,111,112,113,114,116,,117,,,,147,,122,123',
',,148,121,124,125,126,127,128,129,220,221,222,223,,,110,111,112,113',
'114,116,,117,,,,147,,122,123,145,373,148,121,124,125,126,127,128,129',
',13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,,,110,111,112,113',
'114,116,,117,,,,147,,122,123,,,148,121,124,125,126,127,128,129,220,221',
'222,223,,,,,146,,,110,111,112,113,114,116,,117,,,,147,148,122,123,145',
',,121,124,125,126,127,128,129,110,111,112,113,114,116,,117,,153,,147',
',122,123,,,,121,124,125,126,127,128,129,,110,111,112,113,114,116,148',
'117,,,,147,,122,123,364,,,121,124,125,126,127,128,129,,,146,,,110,111',
'112,113,114,116,,117,,,,147,148,122,123,,,,121,124,125,126,127,128,129',
'110,111,112,113,114,116,,117,,354,,147,148,122,123,,,,121,124,125,126',
'127,128,129,,110,111,112,113,114,116,,117,,,,147,148,122,123,,,,121',
'124,125,126,127,128,129,110,111,112,113,114,116,,117,,,,147,,122,123',
',,148,121,124,125,126,127,128,129,,,345,,,110,111,112,113,114,116,,117',
',,,147,148,122,123,,,,121,124,125,126,127,128,129,,110,111,112,113,114',
'116,,117,,,,147,148,122,123,,,,121,124,125,126,127,128,129,110,111,112',
'113,114,116,,117,,,,147,148,122,123,,,,121,124,125,126,127,128,129,110',
'111,112,113,114,116,,117,,,,147,,122,123,,,148,121,124,125,126,127,128',
'129,,110,111,112,113,114,116,,117,,,,147,,122,123,,,148,121,124,125',
'126,127,128,129,110,111,112,113,114,116,,117,,,,147,,122,123,,,148,121',
'124,125,126,127,128,129,,,189,,,188,,191,,192,193,194,,,,,,148,110,111',
'112,113,114,116,,117,,,,147,,122,123,,,,121,124,125,126,127,128,129',
'148,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,,,,,,,,148,33',
'34,,,,,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,,,110,111',
'112,113,114,116,,117,,,,147,,122,123,,,148,121,124,125,126,127,128,129',
'110,111,112,113,114,196,,117,,,,147,,122,123,,,,121,124,125,126,127',
'128,129,110,111,112,113,114,198,,117,,,,147,,122,123,,,,121,124,125',
'126,127,128,129,,110,111,112,113,114,198,,117,,,,147,,122,123,,,148',
'121,124,125,126,127,128,129,110,111,112,113,114,116,,117,,,,147,,122',
'123,,,148,121,124,125,126,127,128,129,110,111,112,113,114,116,,117,',
',,147,,122,123,,,148,121,124,125,126,127,128,129,,110,111,112,113,114',
'116,,117,,,,147,,122,123,,,148,121,124,125,126,127,128,129,110,111,112',
'113,114,116,,117,,,,147,,122,123,,,148,121,124,125,126,127,128,129,110',
'111,112,113,114,116,,117,,,,147,,122,123,,,148,121,124,125,126,127,128',
'129,,110,111,112,113,114,116,,117,,,,147,,122,123,,,148,121,124,125',
'126,127,128,129,110,111,112,113,114,116,,117,,,,147,,122,123,,,148,121',
'124,125,126,127,128,129,110,111,112,113,114,116,,117,,,,147,,122,123',
',,148,121,124,125,126,127,128,129,202,203,204,205,206,207,208,209,210',
'211,212,,,,,,46,,148,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33',
'34,,,,,,,,148,,46,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34',
',,,,,148,45,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32',
'33,34,35,36,37,38,,,47,45,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23',
'27,29,31,32,33,34,35,36,37,38,,41,47,299,350,,273,,,,,,,,,,,,56,,,,',
',,,,,269,350,,273,,,54,,,,,,,,,56,,,,,,,,9,10,11,12,13,14,15,16,17,18',
'19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,9,10,11,12,13,14,15,16',
'17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,392,,,,,,,,,,,,,',
',,,,,,,,,,,155,,,,,,,,,,,,,,,,,,,,,,9,10,11,12,13,14,15,16,17,18,19',
'20,21,22,23,27,29,31,32,33,34,35,36,37,38,9,10,11,12,13,14,15,16,17',
'18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,346,9,10,11,12,13,14',
'15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,,,,,,356,,',
',,,,,,,,,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33',
'34,35,36,37,38,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31',
'32,33,34,35,36,37,38,170,,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,9,10',
'11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38',
'9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36',
'37,38,282,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33',
'34,35,36,37,38,,,,,,,,,,,,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23',
'27,29,31,32,33,34,35,36,37,38,9,10,11,12,13,14,15,16,17,18,19,20,21',
'22,23,27,29,31,32,33,34,35,36,37,38,9,10,11,12,13,14,15,16,17,18,19',
'20,21,22,23,27,29,31,32,33,34,35,36,37,38,9,10,11,12,13,14,15,16,17',
'18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,9,10,11,12,13,14,15',
'16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,9,10,11,12,13',
'14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38,9,10,11',
'12,13,14,15,16,17,18,19,20,21,22,23,27,29,31,32,33,34,35,36,37,38' ]
        racc_action_table = arr = ::Array.new(3139, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'335,335,335,335,335,335,184,335,172,344,328,335,393,335,335,335,51,184',
'335,335,335,335,335,335,335,3,56,352,352,352,352,352,352,328,352,30',
'352,162,352,30,352,352,51,172,344,352,352,352,352,352,352,352,335,335',
'335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335,335',
'335,335,335,335,335,335,335,56,56,32,335,335,335,32,335,335,335,335',
'335,335,335,335,335,335,424,424,424,424,424,424,416,424,105,236,182',
'424,185,424,424,424,190,416,424,424,424,424,424,424,424,352,380,338',
'338,338,338,338,338,53,338,191,53,380,338,192,338,338,32,105,236,338',
'338,338,338,338,338,338,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,424,424,424,156,177',
'154,424,424,424,177,424,424,424,424,424,424,424,424,424,424,422,422',
'422,422,422,422,417,422,279,49,152,422,148,422,422,422,146,417,422,422',
'422,422,422,422,422,338,419,337,337,337,337,337,337,272,337,140,272',
'419,337,348,337,337,348,279,49,337,337,337,337,337,337,337,422,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,422,422,422,422,139,286,138,422,422,422,286,422,422,422,422',
'422,422,422,422,422,422,420,420,420,420,420,420,379,420,300,298,137',
'420,298,420,420,420,300,379,420,420,420,420,420,420,420,337,369,336',
'336,336,336,336,336,302,336,115,83,369,336,83,336,336,317,317,302,336',
'336,336,336,336,336,336,420,420,420,420,420,420,420,420,420,420,420',
'420,420,420,420,420,420,420,420,420,420,420,420,420,420,420,109,291',
'108,420,420,420,291,420,420,420,420,420,420,420,420,420,420,404,404',
'404,404,404,404,381,404,179,179,102,404,101,404,404,404,234,381,404',
'404,404,404,404,404,404,336,250,189,189,189,189,189,189,189,189,316',
'316,313,189,252,189,189,313,313,255,189,189,189,189,189,189,189,404',
'404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404',
'404,404,404,404,404,404,404,404,99,99,256,404,404,404,257,404,404,404',
'404,404,404,404,404,404,404,333,333,333,333,333,333,98,333,323,323,259',
'333,260,333,333,333,315,315,333,333,333,333,333,333,333,189,261,178',
'178,178,178,178,178,262,178,232,232,314,178,94,178,178,314,314,93,178',
'178,178,178,178,178,178,333,333,333,333,333,333,333,333,333,333,333',
'333,333,333,333,333,333,333,333,333,333,333,333,333,333,333,320,320',
'1,333,333,333,281,333,333,333,333,333,333,333,333,333,333,402,402,402',
'402,402,402,88,402,319,319,87,402,307,402,402,402,141,141,402,402,402',
'402,402,402,402,178,308,412,412,412,412,412,412,324,412,318,318,325',
'412,326,412,412,412,412,327,412,412,412,412,412,412,412,402,402,402',
'402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402,402',
'402,402,402,402,402,402,134,134,331,402,402,402,334,402,402,402,402',
'402,402,402,402,402,402,149,149,149,149,149,149,73,149,397,397,412,149',
'72,149,149,149,149,71,149,149,149,149,149,149,149,412,339,407,407,407',
'407,407,407,407,407,133,133,132,407,341,407,407,132,132,346,407,407',
'407,407,407,407,407,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,175,175,349',
'149,149,149,351,149,149,149,149,149,149,149,149,149,149,418,418,418',
'418,418,418,68,418,136,136,66,418,355,418,418,418,65,370,418,418,418',
'418,418,418,418,407,371,406,406,406,406,406,406,406,406,382,387,391',
'406,403,406,406,28,26,24,406,406,406,406,406,406,406,418,418,418,418',
'418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418,418',
'418,418,418,418,418,413,423,163,418,418,418,,418,418,418,418,418,418',
'418,418,418,418,426,426,426,426,426,426,,426,,,,426,,426,426,426,,,426',
'426,426,426,426,426,426,406,,405,405,405,405,405,405,,405,,,,405,,405',
'405,,,,405,405,405,405,405,405,405,426,426,426,426,426,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426,426',
',,,426,426,426,,426,426,426,426,426,426,426,426,426,426,377,377,377',
'377,377,377,,377,,,,377,,377,377,377,,,377,377,377,377,377,377,377,405',
',384,384,384,384,384,384,,384,,,,384,,384,384,,,,384,384,384,384,384',
'384,384,377,377,377,377,377,377,377,377,377,377,377,377,377,377,377',
'377,377,377,377,377,377,377,377,377,377,377,,384,,377,377,377,,377,377',
'377,377,377,377,377,377,377,377,258,258,258,258,258,258,,258,,,,258',
',258,258,258,,,258,258,258,258,258,258,258,384,,383,383,383,383,383',
'383,,383,,,,383,,383,383,,,,383,383,383,383,383,383,383,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,,383,,258,258,258,,258,258,258,258,258,258,258',
'258,258,258,340,340,340,340,340,340,,340,,,,340,,340,340,,,,340,340',
'340,340,340,340,340,383,372,372,372,372,372,372,268,372,,268,55,372',
'268,372,372,,55,,372,372,372,372,372,372,372,55,340,340,340,340,340',
'340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340,340',
'340,340,340,340,368,368,368,368,368,368,,368,,,,368,,368,368,340,,268',
'368,368,368,368,368,368,368,364,364,364,364,364,364,,364,,,,364,,364',
'364,364,372,,364,364,364,364,364,364,364,359,359,359,359,359,359,,359',
',52,4,359,,359,359,52,4,,359,359,359,359,359,359,359,4,217,217,217,217',
'217,217,,217,,,237,217,,217,217,,237,368,217,217,217,217,217,217,217',
'237,,364,,,216,216,216,216,216,216,,216,,,,216,364,216,216,,52,,216',
'216,216,216,216,216,216,215,215,215,215,215,215,,215,,,77,215,359,215',
'215,,77,,215,215,215,215,215,215,215,77,145,145,145,145,145,145,,145',
',,,145,217,145,145,145,,,145,145,145,145,145,145,145,214,214,214,214',
'214,214,,214,,,,214,,214,214,,,216,214,214,214,214,214,214,214,213,213',
'213,213,213,213,,213,,,181,213,187,213,213,187,181,215,213,213,213,213',
'213,213,213,181,,187,145,,,201,201,201,201,201,201,,201,,,,201,145,201',
'201,,,,201,201,201,201,201,201,201,158,166,79,158,284,,158,166,79,,284',
',214,,,158,166,79,,284,198,198,198,198,198,198,,198,,,97,198,,198,198',
',97,213,198,198,198,198,198,198,198,97,135,135,135,135,,188,188,188',
'188,188,188,,188,,,358,188,,188,188,,358,201,188,188,188,188,188,188',
'188,358,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,,,196,196,196,196,196,196,,196,,,,196,,196,196,,,198,196,196',
'196,196,196,196,196,322,322,322,322,,,330,330,330,330,330,330,,330,',
',,330,,330,330,330,330,188,330,330,330,330,330,330,330,,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,,,304,304,304',
'304,304,304,,304,,,,304,,304,304,,,196,304,304,304,304,304,304,304,321',
'321,321,321,,,,,330,,,80,80,80,80,80,80,,80,,,,80,330,80,80,80,,,80',
'80,80,80,80,80,80,85,85,85,85,85,85,,85,,85,,85,,85,85,,,,85,85,85,85',
'85,85,85,,296,296,296,296,296,296,304,296,,,,296,,296,296,296,,,296',
'296,296,296,296,296,296,,,80,,,295,295,295,295,295,295,,295,,,,295,80',
'295,295,,,,295,295,295,295,295,295,295,273,273,273,273,273,273,,273',
',273,,273,85,273,273,,,,273,273,273,273,273,273,273,,263,263,263,263',
'263,263,,263,,,,263,296,263,263,,,,263,263,263,263,263,263,263,251,251',
'251,251,251,251,,251,,,,251,,251,251,,,295,251,251,251,251,251,251,251',
',,263,,,231,231,231,231,231,231,,231,,,,231,273,231,231,,,,231,231,231',
'231,231,231,231,,230,230,230,230,230,230,,230,,,,230,263,230,230,,,',
'230,230,230,230,230,230,230,229,229,229,229,229,229,,229,,,,229,251',
'229,229,,,,229,229,229,229,229,229,229,228,228,228,228,228,228,,228',
',,,228,,228,228,,,231,228,228,228,228,228,228,228,,227,227,227,227,227',
'227,,227,,,,227,,227,227,,,230,227,227,227,227,227,227,227,226,226,226',
'226,226,226,,226,,,,226,,226,226,,,229,226,226,226,226,226,226,226,',
',119,,,119,,119,,119,119,119,,,,,,228,116,116,116,116,116,116,,116,',
',,116,,116,116,,,,116,116,116,116,116,116,116,227,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,75,75,75,,,,,,,,226,119,119,,,,,116,116,116',
'116,116,116,116,116,116,116,116,116,116,116,116,116,116,,,120,120,120',
'120,120,120,,120,,,,120,,120,120,,,116,120,120,120,120,120,120,120,121',
'121,121,121,121,121,,121,,,,121,,121,121,,,,121,121,121,121,121,121',
'121,122,122,122,122,122,122,,122,,,,122,,122,122,,,,122,122,122,122',
'122,122,122,,123,123,123,123,123,123,,123,,,,123,,123,123,,,120,123',
'123,123,123,123,123,123,225,225,225,225,225,225,,225,,,,225,,225,225',
',,121,225,225,225,225,225,225,225,224,224,224,224,224,224,,224,,,,224',
',224,224,,,122,224,224,224,224,224,224,224,,223,223,223,223,223,223',
',223,,,,223,,223,223,,,123,223,223,223,223,223,223,223,222,222,222,222',
'222,222,,222,,,,222,,222,222,,,225,222,222,222,222,222,222,222,221,221',
'221,221,221,221,,221,,,,221,,221,221,,,224,221,221,221,221,221,221,221',
',220,220,220,220,220,220,,220,,,,220,,220,220,,,223,220,220,220,220',
'220,220,220,219,219,219,219,219,219,,219,,,,219,,219,219,,,222,219,219',
'219,219,219,219,219,218,218,218,218,218,218,,218,,,,218,,218,218,,,221',
'218,218,218,218,218,218,218,130,130,130,130,130,130,130,130,130,130',
'130,,,,,,41,,220,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47',
',,,,,,,219,,2,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,,,',
',,218,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41',
'41,41,41,41,41,,,41,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,,2,2,299,299,,299,,,,,,,,,,,,299,,,,,,,,,,269,269,,269,,,269,,,',
',,,,,269,,,,,,,,299,299,299,299,299,299,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,299,299,299,299,299,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,353,,,,,,,,,,,,,,,,,,,,,,,,,86,,,,,,,,,,,,,,,,,,,,,,353',
'353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353,353',
'353,353,353,353,353,353,353,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,267,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,,,,,,274,,,,,,,,,,,,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,95,,,,,,,,,',
',,,,,,,,,,,,,,,164,,,,,,,,,,,,95,95,95,95,95,95,95,95,95,95,95,95,95',
'95,95,95,95,95,95,95,95,95,95,95,95,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'167,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,,,,,,,,,,,,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,69,69,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5',
'5,5,5,5,5,5,5' ]
        racc_action_check = arr = ::Array.new(3139, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   555,  2469,    25,  1271,  3059,  3034,  2959,  2934,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   750,   nil,   749,   nil,   789,   nil,
    22,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  2440,   nil,   nil,   nil,   nil,   nil,  2385,   nil,   180,
   nil,    -1,  1270,   121,   nil,  1169,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   759,   753,   nil,   749,  3009,
   nil,   665,   664,   654,   nil,  2013,  2412,  1352,   nil,  1476,
  1687,   nil,   nil,   314,   nil,  1712,  2667,   572,   554,   nil,
   nil,  2984,  2693,   465,   460,  2822,   nil,  1504,   468,   440,
   nil,   349,   377,   nil,   nil,    84,   nil,   nil,   322,   268,
   nil,   nil,   nil,   nil,   nil,   311,  2044,   nil,   nil,  2023,
  2120,  2145,  2170,  2196,   nil,   nil,   nil,   nil,   nil,   nil,
  2382,   nil,   680,   677,   619,  1496,   733,   274,   233,   230,
   186,   546,   nil,   nil,   nil,  1373,   199,   nil,   189,   663,
   nil,   nil,   189,   nil,   167,   nil,   154,   nil,  1474,   nil,
   nil,  2873,   -17,   786,  2847,   nil,  1475,  2909,   nil,   nil,
   nil,   nil,   -11,   nil,   nil,   725,   nil,   161,   500,   370,
   nil,  1428,    92,   nil,    -2,    99,   nil,  1430,  1530,   405,
   104,   117,   121,   nil,   nil,   nil,  1575,   nil,  1499,   nil,
   nil,  1454,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1423,  1398,  1347,  1322,  1292,  2398,  2373,
  2348,  2322,  2297,  2272,  2246,  2221,  2001,  1976,  1950,  1925,
  1900,  1874,   492,   nil,   387,   nil,    85,  1297,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   364,  1844,   377,   nil,   nil,   417,   453,   457,  1043,   478,
   474,   447,   454,  1819,   nil,   nil,   nil,  2735,  1165,  2570,
   nil,   nil,   216,  1793,  2760,   nil,   nil,   nil,   nil,   179,
   nil,   517,   nil,   nil,  1478,   nil,   256,   nil,   nil,   nil,
   nil,   351,   nil,   nil,   nil,  1768,  1738,   nil,   287,  2545,
   282,   nil,   310,   nil,  1651,   nil,   nil,   574,   588,   nil,
   nil,   nil,   nil,   395,   490,   468,   392,   298,   576,   549,
   524,  1647,  1571,   448,   582,   570,   571,   575,    -9,   nil,
  1606,   642,   nil,   473,   612,    -2,   310,   215,   120,   603,
  1138,   650,   nil,   nil,   -10,   nil,   697,   nil,   222,   737,
   nil,   741,    25,  2642,   nil,   761,   nil,   nil,  1535,  1266,
   nil,   nil,   nil,   nil,  1241,   nil,   nil,   nil,  1216,   303,
   760,   769,  1164,   nil,   nil,   nil,   nil,   948,   nil,   283,
   113,   378,   788,  1070,   975,   nil,   nil,   784,   nil,   nil,
   nil,   786,   nil,     4,   nil,   nil,   nil,   655,   nil,   nil,
   nil,   nil,   568,   782,   378,   880,   785,   690,   nil,   nil,
   nil,   nil,   595,   752,   nil,   nil,    93,   188,   758,   208,
   283,   nil,   188,   785,    93,   nil,   853,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -209,  -261,    -1,  -261,  -261,   -86,   -87,   -88,   -92,   -98,
   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,
  -109,  -110,  -111,  -112,  -114,  -115,  -116,  -117,  -120,  -123,
  -261,  -141,  -261,  -163,  -164,  -165,  -166,  -167,  -168,  -210,
  -211,  -261,  -213,  -214,  -217,  -218,  -219,  -261,   432,  -261,
   -94,   -96,  -261,  -170,  -172,  -261,  -178,   -89,  -114,  -116,
   -90,   -91,   -93,  -216,  -215,  -122,  -261,  -126,  -140,  -261,
  -144,  -151,  -261,  -158,  -212,  -130,  -132,  -261,   -85,  -261,
  -261,  -223,  -224,  -169,  -171,  -261,  -261,  -261,  -179,  -180,
  -118,  -261,  -261,  -114,  -115,  -261,  -142,  -261,  -261,  -261,
  -159,  -161,  -261,  -131,  -133,  -261,  -221,   -95,   -96,    -2,
    -3,    -4,    -5,    -6,    -7,    -8,  -261,   -10,   -12,   -25,
  -261,  -261,  -261,  -261,   -31,   -32,   -33,   -34,   -35,   -36,
   -37,   -39,   -43,   -46,   -49,   -54,   -57,   -59,   -61,   -63,
   -65,   -67,   -69,   -97,  -203,  -261,  -261,  -257,  -261,  -261,
   -37,   -84,  -261,  -175,  -261,  -177,  -182,  -184,  -188,  -173,
  -181,  -261,  -114,  -115,  -261,  -124,  -261,  -261,  -147,  -146,
  -139,  -143,  -261,  -148,  -150,  -261,  -152,  -261,  -261,  -261,
  -220,  -261,  -261,   -11,  -261,  -261,   -82,  -189,  -261,  -261,
  -261,  -261,  -261,   -19,   -20,   -26,  -261,   -27,  -261,   -29,
   -30,  -261,   -71,   -72,   -73,   -74,   -75,   -76,   -77,   -78,
   -79,   -80,   -81,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -207,  -261,  -258,  -261,  -261,  -225,  -226,
  -227,  -228,  -229,  -230,  -231,  -232,  -233,  -234,  -235,  -236,
  -257,  -261,  -261,  -240,  -241,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -261,  -260,  -174,  -176,  -261,  -191,  -261,
  -186,  -187,  -192,  -261,  -261,  -129,  -128,  -121,  -125,  -261,
  -134,  -136,  -138,  -145,  -261,  -154,  -261,  -153,  -160,  -162,
  -156,  -261,  -222,  -259,    -9,  -261,  -261,  -190,  -191,  -261,
  -261,   -14,  -261,   -23,  -261,   -17,   -18,  -261,  -261,   -70,
   -40,   -41,   -42,   -44,   -45,   -47,   -48,   -50,   -51,   -52,
   -53,   -55,   -56,   -58,   -60,   -62,   -64,   -66,  -261,  -204,
  -261,  -261,  -242,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -253,  -254,  -261,  -255,  -261,  -185,  -193,  -261,
  -199,  -261,  -261,  -261,  -195,  -261,  -119,  -127,  -261,  -261,
  -149,  -155,  -157,   -83,  -261,   -38,   -13,   -15,  -261,  -261,
   -28,  -261,  -261,  -205,  -208,  -206,  -237,  -261,  -239,  -261,
  -261,  -261,  -261,  -261,  -261,  -252,  -256,  -261,  -194,  -200,
  -197,  -261,  -201,  -261,  -196,  -135,  -137,  -261,   -24,   -16,
   -68,  -238,  -261,  -261,  -261,  -261,  -261,  -261,  -183,  -198,
  -202,   -21,  -261,  -243,  -245,  -246,  -261,  -261,  -261,  -261,
  -261,   -22,  -261,  -261,  -261,  -248,  -261,  -250,  -244,  -247,
  -249,  -251 ]

racc_goto_table = [
    51,    81,    44,   143,   144,     4,   154,   151,    57,    60,
    61,    62,   232,    89,   238,   173,    83,   280,   302,   184,
   171,   383,    40,    26,   348,    95,   185,   288,   278,    94,
    99,   172,   164,   152,   271,   195,   315,   316,    77,   321,
   322,    44,    24,   326,     4,   160,   313,   314,   167,     2,
   150,   163,    94,   325,   348,    94,   175,   324,   323,   347,
   179,    74,    26,   297,   406,   407,   103,   104,     1,   144,
    39,   105,    97,   106,   149,   108,    75,   317,   318,   319,
   320,    24,   161,    65,    66,   150,   197,   199,   200,   158,
   107,   300,   171,   174,   166,    97,   279,   201,    97,   184,
   151,   184,   274,    68,    75,    75,   307,   327,   308,    93,
   nil,   nil,   nil,   303,   nil,   268,   nil,   nil,   nil,   nil,
   nil,   163,   nil,   339,   163,   309,   289,    94,   310,   311,
   312,   162,    93,   369,   328,    93,   288,   nil,   278,   nil,
   nil,   288,   nil,   150,   298,    75,    76,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   270,    88,   nil,   nil,   nil,   nil,
   nil,   nil,   281,   nil,   166,   nil,   344,   166,   nil,   nil,
    97,   nil,   nil,   151,    76,    76,   nil,   292,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   nil,   355,   376,   334,
   378,   162,   360,   nil,   162,   nil,   nil,    93,   nil,   395,
   nil,   365,   nil,   nil,   nil,    76,   150,   nil,   190,   363,
   nil,   nil,   nil,   nil,   nil,    75,   268,    75,   303,   nil,
   nil,   397,    83,   108,   163,   nil,   nil,   nil,   nil,   379,
   380,   381,   401,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   374,   144,   nil,   298,   nil,   nil,   nil,
   nil,   150,   nil,   nil,   nil,   nil,   nil,   413,   nil,   415,
   158,   nil,   158,   393,   nil,   nil,   391,   166,   nil,   nil,
   174,   151,   nil,   425,   nil,   427,   nil,   428,   144,   430,
   nil,   431,   398,   nil,   400,    76,   nil,    76,   nil,   nil,
   nil,   nil,   158,   nil,   nil,   nil,   nil,   396,   416,   417,
   419,   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   374,   144,   150,   nil,   nil,
   384,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   414,   281,   nil,   158 ]

racc_goto_check = [
    36,    70,    29,    37,    12,    30,    60,    26,    30,    30,
    30,    30,    11,    58,    72,    55,    59,    49,     8,     6,
    53,    80,    66,    40,    64,    52,    10,    57,    46,    39,
    56,    54,    43,    28,    63,    15,    17,    17,    48,    19,
    19,    29,    38,    23,    30,    58,    16,    16,    52,     2,
    13,    39,    39,    22,    64,    39,    56,    21,    20,    62,
    56,    66,    40,    63,    80,    80,    48,    48,     1,    12,
    65,    69,    30,    36,    71,    36,    33,    18,    18,    18,
    18,    38,    44,    42,    45,    13,    13,    13,    13,    30,
    35,     6,    53,    36,    30,    30,    47,    27,    30,     6,
    26,     6,    43,    51,    33,    33,    10,    24,    10,    38,
   nil,   nil,   nil,    12,   nil,    58,   nil,   nil,   nil,   nil,
   nil,    39,   nil,    72,    39,    12,    28,    39,    15,    15,
    15,    38,    38,     8,     6,    38,    57,   nil,    46,   nil,
   nil,    57,   nil,    13,    58,    33,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    36,     9,   nil,   nil,   nil,   nil,
   nil,   nil,    36,   nil,    30,   nil,     6,    30,   nil,   nil,
    30,   nil,   nil,    26,     9,     9,   nil,    36,    13,    13,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    13,    13,    13,    13,    13,   nil,    12,    72,    28,
    72,    38,    55,   nil,    38,   nil,   nil,    38,   nil,    49,
   nil,    15,   nil,   nil,   nil,     9,    13,   nil,     9,    12,
   nil,   nil,   nil,   nil,   nil,    33,    58,    33,    12,   nil,
   nil,    11,    59,    36,    39,   nil,   nil,   nil,   nil,     6,
     6,     6,    72,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    37,    12,   nil,    58,   nil,   nil,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,    72,   nil,    72,
    30,   nil,    30,    60,   nil,   nil,    12,    30,   nil,   nil,
    36,    26,   nil,    72,   nil,    72,   nil,    72,    12,    72,
   nil,    72,    12,   nil,    26,     9,   nil,     9,   nil,   nil,
   nil,   nil,    30,   nil,   nil,   nil,   nil,    28,     6,     6,
     6,   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,    12,    13,   nil,   nil,
    29,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    70,    36,   nil,    30 ]

racc_goto_pointer = [
   nil,    68,    49,   nil,   nil,   nil,   -97,   nil,  -171,    99,
   -90,  -133,   -76,   -35,   nil,   -85,  -170,  -182,  -143,  -185,
  -168,  -170,  -175,  -186,  -123,   nil,   -78,   -33,   -52,     0,
     3,   nil,   nil,    29,   nil,    11,    -4,   -77,    40,   -40,
    21,   nil,    55,   -59,    -8,    56,  -136,   -70,    -9,  -149,
   nil,    73,   -44,   -75,   -66,   -82,   -42,  -150,   -43,   -36,
   -80,   nil,  -208,  -124,  -244,    68,    20,   nil,   nil,    -6,
   -50,    -8,  -135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -319,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   118,   109,   115,   236,   119,   nil,     7,
   nil,   nil,   186,   130,   120,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   nil,   nil,   239,
   237,    49,     5,     6,     8,    50,    87,   233,    58,    25,
    59,    28,   nil,   nil,   nil,   nil,   165,   nil,   187,   nil,
    30,   nil,   nil,    96,   nil,   nil,   nil,   100,    52,    53,
   351,   156,   157,   349,   272,   nil,   nil,    42,    43,   nil,
   246,   nil,   nil,   240,   241,   242,   243,   244,   245,   247,
   248,   249 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 98, :_reduce_none,
  1, 100, :_reduce_2,
  1, 100, :_reduce_3,
  1, 100, :_reduce_4,
  1, 100, :_reduce_5,
  1, 100, :_reduce_6,
  1, 100, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 102, :_reduce_10,
  2, 102, :_reduce_11,
  1, 104, :_reduce_none,
  4, 104, :_reduce_13,
  3, 104, :_reduce_none,
  4, 104, :_reduce_none,
  5, 104, :_reduce_none,
  3, 104, :_reduce_17,
  3, 104, :_reduce_18,
  2, 104, :_reduce_19,
  2, 104, :_reduce_20,
  6, 104, :_reduce_none,
  7, 104, :_reduce_none,
  1, 105, :_reduce_none,
  3, 105, :_reduce_none,
  1, 110, :_reduce_none,
  2, 110, :_reduce_26,
  2, 110, :_reduce_27,
  4, 110, :_reduce_28,
  2, 110, :_reduce_29,
  2, 110, :_reduce_30,
  1, 111, :_reduce_31,
  1, 111, :_reduce_32,
  1, 111, :_reduce_33,
  1, 111, :_reduce_34,
  1, 111, :_reduce_35,
  1, 111, :_reduce_36,
  1, 112, :_reduce_none,
  4, 112, :_reduce_38,
  1, 113, :_reduce_none,
  3, 113, :_reduce_40,
  3, 113, :_reduce_41,
  3, 113, :_reduce_42,
  1, 114, :_reduce_none,
  3, 114, :_reduce_44,
  3, 114, :_reduce_45,
  1, 115, :_reduce_none,
  3, 115, :_reduce_47,
  3, 115, :_reduce_48,
  1, 116, :_reduce_none,
  3, 116, :_reduce_50,
  3, 116, :_reduce_51,
  3, 116, :_reduce_52,
  3, 116, :_reduce_53,
  1, 117, :_reduce_none,
  3, 117, :_reduce_55,
  3, 117, :_reduce_56,
  1, 118, :_reduce_none,
  3, 118, :_reduce_58,
  1, 119, :_reduce_none,
  3, 119, :_reduce_60,
  1, 120, :_reduce_none,
  3, 120, :_reduce_62,
  1, 121, :_reduce_none,
  3, 121, :_reduce_64,
  1, 122, :_reduce_none,
  3, 122, :_reduce_66,
  1, 123, :_reduce_none,
  5, 123, :_reduce_68,
  1, 109, :_reduce_none,
  3, 109, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 103, :_reduce_82,
  3, 103, :_reduce_83,
  1, 125, :_reduce_84,
  3, 126, :_reduce_none,
  1, 127, :_reduce_86,
  1, 127, :_reduce_none,
  1, 127, :_reduce_88,
  2, 127, :_reduce_89,
  2, 127, :_reduce_90,
  2, 127, :_reduce_91,
  1, 127, :_reduce_none,
  2, 127, :_reduce_none,
  1, 128, :_reduce_94,
  3, 128, :_reduce_95,
  1, 132, :_reduce_none,
  3, 132, :_reduce_97,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 130, :_reduce_102,
  1, 130, :_reduce_103,
  1, 130, :_reduce_104,
  1, 130, :_reduce_105,
  1, 130, :_reduce_106,
  1, 130, :_reduce_107,
  1, 130, :_reduce_108,
  1, 130, :_reduce_109,
  1, 130, :_reduce_110,
  1, 130, :_reduce_111,
  1, 130, :_reduce_112,
  1, 130, :_reduce_113,
  1, 130, :_reduce_114,
  1, 130, :_reduce_115,
  1, 130, :_reduce_116,
  1, 130, :_reduce_117,
  0, 141, :_reduce_118,
  6, 135, :_reduce_119,
  0, 142, :_reduce_120,
  5, 135, :_reduce_121,
  2, 135, :_reduce_122,
  1, 138, :_reduce_123,
  1, 140, :_reduce_none,
  2, 140, :_reduce_none,
  1, 139, :_reduce_126,
  3, 143, :_reduce_127,
  2, 143, :_reduce_none,
  2, 143, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_131,
  1, 145, :_reduce_132,
  2, 145, :_reduce_133,
  1, 144, :_reduce_134,
  3, 144, :_reduce_135,
  1, 146, :_reduce_none,
  3, 146, :_reduce_none,
  5, 136, :_reduce_138,
  4, 136, :_reduce_139,
  2, 136, :_reduce_140,
  1, 147, :_reduce_141,
  1, 149, :_reduce_none,
  2, 149, :_reduce_none,
  1, 148, :_reduce_none,
  3, 150, :_reduce_none,
  2, 150, :_reduce_none,
  2, 150, :_reduce_none,
  1, 151, :_reduce_none,
  3, 151, :_reduce_none,
  1, 152, :_reduce_none,
  2, 137, :_reduce_none,
  4, 137, :_reduce_none,
  5, 137, :_reduce_none,
  5, 137, :_reduce_none,
  6, 137, :_reduce_none,
  5, 137, :_reduce_none,
  6, 137, :_reduce_none,
  2, 137, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_none,
  1, 154, :_reduce_none,
  3, 154, :_reduce_none,
  1, 106, :_reduce_163,
  1, 106, :_reduce_164,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  2, 133, :_reduce_169,
  1, 133, :_reduce_none,
  2, 133, :_reduce_171,
  1, 156, :_reduce_172,
  3, 156, :_reduce_173,
  4, 156, :_reduce_174,
  3, 156, :_reduce_175,
  4, 156, :_reduce_176,
  3, 156, :_reduce_177,
  1, 155, :_reduce_178,
  2, 155, :_reduce_179,
  2, 155, :_reduce_180,
  3, 155, :_reduce_181,
  1, 157, :_reduce_none,
  5, 157, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_none,
  2, 159, :_reduce_none,
  2, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 107, :_reduce_none,
  2, 107, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  2, 160, :_reduce_none,
  3, 161, :_reduce_none,
  2, 161, :_reduce_none,
  3, 161, :_reduce_none,
  3, 161, :_reduce_none,
  4, 161, :_reduce_none,
  2, 161, :_reduce_199,
  3, 161, :_reduce_none,
  3, 161, :_reduce_201,
  4, 161, :_reduce_none,
  1, 134, :_reduce_203,
  3, 134, :_reduce_204,
  4, 134, :_reduce_205,
  4, 134, :_reduce_206,
  1, 108, :_reduce_207,
  3, 108, :_reduce_208,
  0, 99, :_reduce_none,
  2, 99, :_reduce_none,
  1, 162, :_reduce_211,
  2, 162, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  4, 164, :_reduce_220,
  1, 166, :_reduce_221,
  3, 166, :_reduce_222,
  3, 165, :_reduce_none,
  0, 168, :_reduce_none,
  2, 168, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  3, 175, :_reduce_none,
  4, 175, :_reduce_none,
  3, 175, :_reduce_none,
  3, 167, :_reduce_none,
  1, 177, :_reduce_none,
  2, 177, :_reduce_none,
  5, 170, :_reduce_none,
  7, 170, :_reduce_none,
  5, 174, :_reduce_none,
  5, 171, :_reduce_none,
  7, 172, :_reduce_none,
  6, 173, :_reduce_none,
  7, 173, :_reduce_none,
  6, 173, :_reduce_none,
  7, 173, :_reduce_none,
  3, 176, :_reduce_none,
  2, 176, :_reduce_none,
  2, 176, :_reduce_none,
  2, 176, :_reduce_none,
  3, 176, :_reduce_none,
  1, 101, :_reduce_257,
  2, 101, :_reduce_258,
  3, 101, :_reduce_259,
  1, 178, :_reduce_260 ]

racc_reduce_n = 261

racc_shift_n = 432

racc_token_table = {
  false => 0,
  :error => 1,
  :INTEGER_CONSTANT => 2,
  :FLOATING_CONSTANT => 3,
  :OCTAL_CONSTANT => 4,
  :HEX_CONSTANT => 5,
  :CHARACTER_LITERAL => 6,
  "(" => 7,
  ")" => 8,
  :STRING_LITERAL => 9,
  "[" => 10,
  "]" => 11,
  "." => 12,
  :IDENTIFIER => 13,
  "->" => 14,
  "++" => 15,
  "--" => 16,
  "{" => 17,
  "}" => 18,
  "," => 19,
  :SIZEOF => 20,
  "&" => 21,
  "*" => 22,
  "+" => 23,
  "-" => 24,
  "~" => 25,
  "!" => 26,
  "/" => 27,
  "%" => 28,
  "<<" => 29,
  ">>" => 30,
  "<" => 31,
  ">" => 32,
  "<=" => 33,
  ">=" => 34,
  "==" => 35,
  "!=" => 36,
  "^" => 37,
  "|" => 38,
  "&&" => 39,
  "||" => 40,
  "?" => 41,
  ":" => 42,
  "=" => 43,
  "+=" => 44,
  "-=" => 45,
  "*=" => 46,
  "/=" => 47,
  "%=" => 48,
  "<<=" => 49,
  ">>=" => 50,
  "&=" => 51,
  "|=" => 52,
  "^=" => 53,
  ";" => 54,
  :EXTERN => 55,
  :STATIC => 56,
  :AUTO => 57,
  :REGISTER => 58,
  :VOID => 59,
  :CHAR => 60,
  :SHORT => 61,
  :INT => 62,
  :INT64 => 63,
  :BOOL => 64,
  :LONG => 65,
  :SIGNED => 66,
  :UNSIGNED => 67,
  :FLOAT => 68,
  :DOUBLE => 69,
  :TYPE_NAME => 70,
  :STRUCT => 71,
  :UNION => 72,
  :ENUM => 73,
  :CONST => 74,
  :VOLATILE => 75,
  :__INLINE__ => 76,
  :INLINE => 77,
  :__INLINE => 78,
  :CINLINE => 79,
  :C_EXP => 80,
  :EXTENSION => 81,
  :TYPEDEF => 82,
  :CASE => 83,
  :DEFAULT => 84,
  :IF => 85,
  :ELSE => 86,
  :SWITCH => 87,
  :WHILE => 88,
  :DO => 89,
  :FOR => 90,
  :GOTO => 91,
  :CONTINUE => 92,
  :BREAK => 93,
  :RETURN => 94,
  "::" => 95,
  :_ASM => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INTEGER_CONSTANT",
  "FLOATING_CONSTANT",
  "OCTAL_CONSTANT",
  "HEX_CONSTANT",
  "CHARACTER_LITERAL",
  "\"(\"",
  "\")\"",
  "STRING_LITERAL",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "IDENTIFIER",
  "\"->\"",
  "\"++\"",
  "\"--\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "SIZEOF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"/\"",
  "\"%\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\":\"",
  "\"=\"",
  "\"+=\"",
  "\"-=\"",
  "\"*=\"",
  "\"/=\"",
  "\"%=\"",
  "\"<<=\"",
  "\">>=\"",
  "\"&=\"",
  "\"|=\"",
  "\"^=\"",
  "\";\"",
  "EXTERN",
  "STATIC",
  "AUTO",
  "REGISTER",
  "VOID",
  "CHAR",
  "SHORT",
  "INT",
  "INT64",
  "BOOL",
  "LONG",
  "SIGNED",
  "UNSIGNED",
  "FLOAT",
  "DOUBLE",
  "TYPE_NAME",
  "STRUCT",
  "UNION",
  "ENUM",
  "CONST",
  "VOLATILE",
  "__INLINE__",
  "INLINE",
  "__INLINE",
  "CINLINE",
  "C_EXP",
  "EXTENSION",
  "TYPEDEF",
  "CASE",
  "DEFAULT",
  "IF",
  "ELSE",
  "SWITCH",
  "WHILE",
  "DO",
  "FOR",
  "GOTO",
  "CONTINUE",
  "BREAK",
  "RETURN",
  "\"::\"",
  "_ASM",
  "$start",
  "all",
  "C_parser",
  "primary_expression",
  "namespace_identifier",
  "string_literal_list",
  "expression",
  "postfix_expression",
  "argument_list",
  "type_qualifier",
  "type_name",
  "initializer_list",
  "assignment_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "conditional_expression",
  "assignment_operator",
  "constant_expression",
  "declaration",
  "declaration_specifiers",
  "init_declarator_list",
  "storage_class",
  "type_specifier",
  "function_specifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_specifier",
  "union_specifier",
  "enum_specifier",
  "struct_term",
  "struct_tag",
  "struct_declaration_list",
  "@1",
  "@2",
  "struct_declaration",
  "struct_declarator_list",
  "type_specifier_qualifier_list",
  "struct_declarator",
  "union_term",
  "union_tag",
  "union_declaration_list",
  "union_declaration",
  "union_declarator_list",
  "union_declarator",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "parameter_type_list",
  "parameter_list",
  "parameter_declaration",
  "abstract_declarator",
  "direct_abstract_declarator",
  "extension_statement",
  "statement",
  "typedef",
  "func_def",
  "declarator_list",
  "compoundstatement",
  "infunc_statement_list",
  "infunc_statement",
  "ifstatement",
  "whilestatement",
  "dowhilestatement",
  "forstatement",
  "switchstatement",
  "labelstatement",
  "gotostatement",
  "expressionstatement",
  "asm_statement" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 52)
  def _reduce_2(val, _values, result)
     result = [ :IDENTIFIER, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 60)
  def _reduce_3(val, _values, result)
     result = [ :INTEGER_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 62)
  def _reduce_4(val, _values, result)
     result = [ :FLOATING_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 64)
  def _reduce_5(val, _values, result)
     result = [ :OCTAL_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 66)
  def _reduce_6(val, _values, result)
     result = [ :HEX_CONSTANT, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 68)
  def _reduce_7(val, _values, result)
     result = [ :CHARACTER_LITERAL, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 70)
  def _reduce_8(val, _values, result)
     result = [ :STRING_LITERAL_LIST, val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 72)
  def _reduce_9(val, _values, result)
     result = [ :PARENTHESES, val[1].get_elements ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 76)
  def _reduce_10(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 78)
  def _reduce_11(val, _values, result)
     result << val[1] 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 84)
  def _reduce_13(val, _values, result)
     result = [ :OP_SUBSC, val[0], val[2] ] 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 89)
  def _reduce_17(val, _values, result)
     result = [ :OP_DOT, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 91)
  def _reduce_18(val, _values, result)
     result = [ :OP_REF, val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 92)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 93)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 106)
  def _reduce_26(val, _values, result)
     result = [ val[0], val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 108)
  def _reduce_27(val, _values, result)
     result = [ :OP_SIZEOF_EXPR, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 110)
  def _reduce_28(val, _values, result)
     result = [ :OP_SIZEOF_TYPE, val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 111)
  def _reduce_29(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 112)
  def _reduce_30(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 115)
  def _reduce_31(val, _values, result)
     result = :OP_U_AMP 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 116)
  def _reduce_32(val, _values, result)
     result = :OP_U_ASTER 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 117)
  def _reduce_33(val, _values, result)
     result = :OP_U_PLUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 118)
  def _reduce_34(val, _values, result)
     result = :OP_U_MINUS 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 119)
  def _reduce_35(val, _values, result)
     result = :OP_U_TILDE 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 120)
  def _reduce_36(val, _values, result)
     result = :OP_U_EXCLAM 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 125)
  def _reduce_38(val, _values, result)
      result = [ :CAST, val[1], val[3] ] 
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 130)
  def _reduce_40(val, _values, result)
     result = [ :OP_MULT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 132)
  def _reduce_41(val, _values, result)
     result = [ :OP_DIV, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 134)
  def _reduce_42(val, _values, result)
     result = [ :OP_REMAIN, val[0], val[2] ]  
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 139)
  def _reduce_44(val, _values, result)
     result = [ :OP_ADD, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 141)
  def _reduce_45(val, _values, result)
     result = [ :OP_SUB, val[0], val[2] ]  
    result
  end
.,.,

# reduce 46 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 146)
  def _reduce_47(val, _values, result)
     result = [ :OP_LSFT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 148)
  def _reduce_48(val, _values, result)
     result = [ :OP_RSFT, val[0], val[2] ]  
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 153)
  def _reduce_50(val, _values, result)
     result = [ :OP_LT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 155)
  def _reduce_51(val, _values, result)
     result = [ :OP_GT, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 157)
  def _reduce_52(val, _values, result)
     result = [ :OP_LE, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 159)
  def _reduce_53(val, _values, result)
     result = [ :OP_GE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 164)
  def _reduce_55(val, _values, result)
     result = [ :OP_EQ, val[0], val[2] ]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 166)
  def _reduce_56(val, _values, result)
     result = [ :OP_NE, val[0], val[2] ]  
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 171)
  def _reduce_58(val, _values, result)
     result = [ :OP_AND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 176)
  def _reduce_60(val, _values, result)
     result = [ :OP_EOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 181)
  def _reduce_62(val, _values, result)
     result = [ :OP_OR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 186)
  def _reduce_64(val, _values, result)
     result = [ :OP_LAND, val[0], val[2] ]  
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 191)
  def _reduce_66(val, _values, result)
     result = [ :OP_LOR, val[0], val[2] ]  
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 196)
  def _reduce_68(val, _values, result)
     result = [ :OP_CEX, val[0], val[2].get_elements, val[4] ]  
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 218)
  def _reduce_82(val, _values, result)
    			result = Expression.new( val[0] )
			# result.print
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 223)
  def _reduce_83(val, _values, result)
    			result = Expression.new( val[2] )    # ',' の後ろを採用
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 229)
  def _reduce_84(val, _values, result)
    			result = Expression.new( val[0] )
			# result.print
#			res = result.eval_const( nil )

			# if res then
			#   puts "val: #{res}"
			# else
			#   puts "val: nil"
			# end
		
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 258)
  def _reduce_86(val, _values, result)
    			result = CIntType.new( -3 )    # storage class は無視
		
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 263)
  def _reduce_88(val, _values, result)
    			result = CIntType.new( -3 )
			result.set_qualifier val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 268)
  def _reduce_89(val, _values, result)
    			result = val[1]                # storage class は無視
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 272)
  def _reduce_90(val, _values, result)
    			result = val[1].merge val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 276)
  def _reduce_91(val, _values, result)
    			val[1].set_qualifier val[0]
                        result = val[1]
		
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 285)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 287)
  def _reduce_95(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 292)
  def _reduce_97(val, _values, result)
     val[0].set_initializer( val[2] ) 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 303)
  def _reduce_102(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 305)
  def _reduce_103(val, _values, result)
     set_no_type_name true; result = CIntType.new(-11 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 307)
  def _reduce_104(val, _values, result)
     set_no_type_name true; result = CIntType.new( -2 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 309)
  def _reduce_105(val, _values, result)
     set_no_type_name true; result = CIntType.new( -3 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 311)
  def _reduce_106(val, _values, result)
     set_no_type_name true; result = CIntType.new( 64 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 313)
  def _reduce_107(val, _values, result)
     set_no_type_name true; result = CIntType.new( -3 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 315)
  def _reduce_108(val, _values, result)
     set_no_type_name true; result = CIntType.new( -4 ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 318)
  def _reduce_109(val, _values, result)
              set_no_type_name true
         	result = CIntType.new( -3 )
          result.set_sign :SIGNED
        
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 324)
  def _reduce_110(val, _values, result)
              set_no_type_name true
          result = CIntType.new( -3 )
          result.set_sign :UNSIGNED
        
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 329)
  def _reduce_111(val, _values, result)
     set_no_type_name true; result = CFloatType.new(-32) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 331)
  def _reduce_112(val, _values, result)
     set_no_type_name true; result = CFloatType.new(-64) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 333)
  def _reduce_113(val, _values, result)
     set_no_type_name true; result = CBoolType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 335)
  def _reduce_114(val, _values, result)
     set_no_type_name true; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 337)
  def _reduce_115(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 339)
  def _reduce_116(val, _values, result)
     set_no_type_name true; result = CVoidType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 341)
  def _reduce_117(val, _values, result)
     set_no_type_name true; result = CDefinedType.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 347)
  def _reduce_118(val, _values, result)
     StructType.set_define( true )  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 350)
  def _reduce_119(val, _values, result)
    			StructType.end_of_parse
      set_no_type_name true
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 357)
  def _reduce_120(val, _values, result)
    			result = CStructType.new()
			StructType.set_define( true )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 362)
  def _reduce_121(val, _values, result)
    			StructType.end_of_parse
      set_no_type_name true
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 368)
  def _reduce_122(val, _values, result)
    			StructType.set_define( false )
			StructType.end_of_parse
      set_no_type_name true
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 375)
  def _reduce_123(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 384)
  def _reduce_126(val, _values, result)
    			result = CStructType.new( val[0].val )
			set_no_type_name true
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 393)
  def _reduce_127(val, _values, result)
    			val[1].each { |i|	# i: Decl
				i.set_type( val[0] )
				i.set_kind( :MEMBER )
				i.check
				CStructType.new_member( i )
			}
			result = val[1]
		
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 412)
  def _reduce_131(val, _values, result)
    			result = val[1].merge val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 416)
  def _reduce_132(val, _values, result)
    			result = CIntType.new( -3 )
			result.set_qualifier val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 421)
  def _reduce_133(val, _values, result)
    			val[1].set_qualifier val[0]
                        result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 427)
  def _reduce_134(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 429)
  def _reduce_135(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 439)
  def _reduce_138(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 440)
  def _reduce_139(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 441)
  def _reduce_140(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 444)
  def _reduce_141(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 487)
  def _reduce_163(val, _values, result)
     result = :CONST 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 488)
  def _reduce_164(val, _values, result)
     result = :VOLATILE 
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 499)
  def _reduce_169(val, _values, result)
    			val[1].set_type( val[0] )
			result = val[1]
		
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 505)
  def _reduce_171(val, _values, result)
    			result = Decl.new( val[1].val )
			result.set_type( val[0] )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 511)
  def _reduce_172(val, _values, result)
     result = Decl.new( val[0].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 513)
  def _reduce_173(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 516)
  def _reduce_174(val, _values, result)
    			val[0].set_type( CArrayType.new( val[2] ) )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 521)
  def _reduce_175(val, _values, result)
    			val[0].set_type( CArrayType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 526)
  def _reduce_176(val, _values, result)
    		# 	Generator.warning( "W6001 need 'void' for no parameter"  )
			val[0].set_type( CFuncType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 534)
  def _reduce_177(val, _values, result)
    		# 	Generator.warning( "W6002 need 'void' for no parameter"  )
			val[0].set_type( CFuncType.new )
			result = val[0]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 541)
  def _reduce_178(val, _values, result)
     result = CPtrType.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 544)
  def _reduce_179(val, _values, result)
    			result = CPtrType.new
			result.set_qualifier( val[1] )
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 549)
  def _reduce_180(val, _values, result)
    			val[1].set_type(CPtrType.new)
			result = val[1]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 554)
  def _reduce_181(val, _values, result)
    			ptrtype = CPtrType.new
			ptrtype.set_qualifier( val[1] )
			val[2].set_type( ptrtype )
			result = val[2]
		
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 618)
  def _reduce_199(val, _values, result)
    			Generator.warning( "W6003 need 'void' for no parameter"  )
		
    result
  end
.,.,

# reduce 200 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 623)
  def _reduce_201(val, _values, result)
    			Generator.warning( "W6004 need 'void' for no parameter"  )
		
    result
  end
.,.,

# reduce 202 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 630)
  def _reduce_203(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 632)
  def _reduce_204(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 634)
  def _reduce_205(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 636)
  def _reduce_206(val, _values, result)
     result = C_EXP.new( val[2] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 641)
  def _reduce_207(val, _values, result)
    			result = [ val[0] ]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 645)
  def _reduce_208(val, _values, result)
    			val[0] << val[2]
			result = val[0]
		
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 658)
  def _reduce_211(val, _values, result)
     set_no_type_name false 
    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 673)
  def _reduce_220(val, _values, result)
    			val[2].each{ |i|
			   i.set_kind( :TYPEDEF )
			}
			Typedef.new_decl_list( val[1], val[2] )
                        # val[1].show_tree 0
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 682)
  def _reduce_221(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 684)
  def _reduce_222(val, _values, result)
     result << val[2] 
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 747)
  def _reduce_257(val, _values, result)
     result = NamespacePath.new( val[0].val, false ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 748)
  def _reduce_258(val, _values, result)
     result = NamespacePath.new( val[1].val, true ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 750)
  def _reduce_259(val, _values, result)
     result = val[0].append!( val[2].val ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 754)
  def _reduce_260(val, _values, result)
            while true
          # ';' が表れるまで、トークンを読み飛ばす。
          # gcc の構文拡張に対応すべきだが、単純な実装として、';' まで読み飛ばす。
          # トークン単位で読み飛ばしているので、文字列やコメント内の ';' は対象にならない。
          token = next_token
          if token[1].val == ";"
            break
          end
		      # p "skip: #{token[1].val}" 
        end
      
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class C_parser


