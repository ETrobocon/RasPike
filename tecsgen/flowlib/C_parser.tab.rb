#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class TCFLOW_Cparser < Racc::Parser

module_eval(<<'...end C_parser.y.rb/module_eval...', 'C_parser.y.rb', 603)

  RESERVED = {
    # keword
    'typedef' => :TYPEDEF,
    'struct' => :STRUCT,
    'union' => :UNION,

    # specifier
    # types
    'void'    => :VOID,
    'char'    => :CHAR,
    'short'   => :SHORT,

    'volatile'=> :VOLATILE,
    'const'   => :CONST,
    'extern'   => :EXTERN,

    'long'    => :LONG,
    'float'   => :FLOAT,
    'double'  => :DOUBLE,
    'signed'  => :SIGNED,
    'unsigned'=> :UNSIGNED,

    'int'     => :INT,
    'enum'    => :ENUM,
    '__int8'  => :__INT8,
    '__int16' => :__INT16,
    '__int32' => :__INT32,
    '__int64' => :__INT64,
    '__bool'  => :__BOOL,

    'return'  => :RETURN,
    'if'      => :IF,
    'else'    => :ELSE,
    'while'   => :WHILE,
    'do'      => :DO,
    'for'     => :FOR,
    'case'    => :CASE,
    'default' => :DEFAULT,
    'goto'    => :GOTO,
    'continue' => :CONTINUE,
    'break'   => :BREAK,
    'static'  => :STATIC,
    'register' => :REGISTER,
    'auto'    => :AUTO,
    'switch'  => :SWITCH,
    'sizeof'  => :SIZEOF,

    '__inline__'  => :__INLINE__,
    '__forceinline' => :__FORCEINLINE,
    'inline'      => :INLINE,
    '__inline'      => :INLINE,

    '__declspec'  => :__DECLSPEC,
    '__cdecl'     => :__CDECL,
    '__stdcall'   => :__STDCALL,
    '__fastcall'  => :__FASTCALL,

    '__extension__'    => :EXTENSION,
    '__asm__' => :_ASM,

  }

  @@current_locale = []

  def finalize

  
  end

# GCC extension
@@header_lines =<<EOT
#ifndef TECS_NO_GCC_EXTENSION_SUPPORT

/*
 * these extension can be eliminated also by spefcifying option
 * --no-gcc-extension-support for tecsgen.
 */
#ifdef __GNUC__

#ifndef __attribute__
#define __attribute__(x)
#endif

#ifndef __extension__
#define __extension__
#endif

#ifndef __builtin_va_list
typedef char  *__builtin_va_list;
// #define __builtin_va_list va_list
#endif

#ifndef restrict
#define restrict
#define __restrict
#endif

#define __asm__(x)

#define __builtin_offsetof( x, y )  (1)

#endif /* ifdef __GNUC__ */
#endif /* TECS_NO_GCC_EXTENSION_SUPPORT */
EOT


  #===
  #files::String  ファイル名またはpipe コマンド

  ##parse
  def parse(files, cpp_cmd)

    #インスタンス変数
    @current_function = nil
    @type_name_list = {}
    @b_no_type_name = false
    @q = [ :EOF ]
    @processing_file=nil

#    integer_qualifier = "([Uu][Ll]?[Ll]?|[Ll][Ll]?[Uu]?)?" #これだとうまくいく(厳密でない)
#    integer_qualifier = "([Uu][Ll][Ll]|[Uu][Ll]|[Uu]|[Ll][Ll][Uu]|[Ll][Uu]|[Ll][Ll]|[Ll])?" #これもうまくいく(厳密でない)
    integer_qualifier = "([Uu](LL|ll|L|l)|(LL|ll|L|l)[Uu]?|[Uu])?"

    #例外補足1
    begin
      comment = false

      ## 各ファイルに対する処理
      file2_name = ""
      files.each {|file|

        if cpp_cmd then
          file2_name = "#{$gen_dir}/tmp_#{file.sub(/.*\//,"")}"
          File.open( file2_name, "w:ASCII-8BIT" ){
            |f|
            lines = IO.readlines( file )
            f.puts( @@header_lines )
            f.puts lines
          }
        end
        @processing_file=file
        STDERR.print "reading #{file}\n" #ファイルのパスを表示
        lineno = 0

        #例外補足2
        begin #実行する処理
          io = nil
          if cpp_cmd
            io = IO.popen( cpp_cmd + " " + file2_name, "r:ASCII-8BIT" ) #サブプロセスの標準入出力との間にパイプラインを確立
            file3_name = "#{file2_name}_2.c"
            file3 = File.open( file3_name, "w:ASCII-8BIT" )
          else
            io = File.open( file, "r:ASCII-8BIT" )
          end

          ## ioに対する各処理
          io.each {|line|
            lineno += 1
            if cpp_cmd then
                file3.puts line
            end
            col = 1
            line.rstrip! #末尾の空白文字を除去

            until line.empty? ## untilの処理内容

              if comment
                case line
                  # コメント終了
                when /\A\*\//
                  comment = false
                when /\A./
                  ;
                end
              # elsif asm_state != :NONE
              #   if asm_state == :WAIT_NEXT	# __asm が来た直後
              #     case line
              #       # コメント開始
              #     when /\A\s*\{/
              #       asm_state = :WAIT_CB	# 閉じ括弧待ち
              #     when /\As*/
              #       asm_state = :WAIT_SC	# セミコロン待ち
              #     end
              #   elsif asm_state == :WAIT_CB	# 閉じ括弧待ち
              #     case line
              #     when /\A.*\}/			# 本当は最短一致にすべきだろう		
              #           # asm は特種で、通常ブロックが後続するケースはないので
              #       asm_state = :NONE
              #     when /\A.*/
              #       # asm_state = :WAIT_CB	# 閉じ括弧待ちの継続
              #     end
              #   elsif asm_state == :WAIT_SC	# セミコロン待ち
              #     case line
              #     when /\A.*;/
              #       asm_state = :NONE		# 本当は最短一致にすべきだろう
              #     when /\A.*/
              #       # asm_state = :WAIT_SC	# 閉じ括弧待ちの継続
              #     end
              #   end
              else
                case line
                  # 空白、プリプロセスディレクティブ
                  #		when /\A#line\s+(\d+)\s+\"(.*)\"\.*$/ ####ここで行番号がうまく拾えない \d
                when /\A#\s+(\d+)\s+\"(.*)\".*$/ #元のセルタイプコード中での行番号表示
                #  p "#{$1} #{$2}"
                # lineno = __LINE__
                  lineno = $1.to_i - 1         # lineno
                  file = $2
                # # プリプロセッサディレクティブ
                when /\A#.*$/
                # 読み飛ばすだけ
                when /\A\s+/
                  ;
                #   # __asm
                # when /\A__asm/, /\A_asm/
                #   asm_state = :WAIT_NEXT
                  # 識別子
                when /\A[a-zA-Z_]\w*/
                  word = $&
                  @q << [RESERVED[word] || :IDENTIFIER, Token.new(word.intern, file, lineno, col)]

                  # 浮動小数定数
                when /\A[0-9]+\.([0-9]*)?([Ee][+-]?[0-9]+)?([Ff]|[Ll])?/
                  @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
                when /\A\.[0-9]+([Ee][+-]?[0-9]+)?([Ff]|[Ll])?/    # . で始まる
                  @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]
                when /\A[0-9]+[Ee][+-]?[0-9]+([Ff]|[Ll])?/	    # . 以下がない
                  @q << [:FLOATING_CONSTANT, Token.new($&, file, lineno, col)]

                # 16 進数定数 ##! 大文字・小文字区別なし
                when /\A0x[0-9A-Fa-f]+#{integer_qualifier}/
                    @q << [:HEX_CONSTANT, Token.new($&, file, lineno, col)]
                    #when /\A0[Xx][0-9A-Fa-f]+(ULL?|ull?)/, /\A0[Xx][0-9A-Fa-f]+([UL]|[ul])/, /\A0[Xx][0-9A-Fa-f]+/
                  # 8 進数定数 ##! 大文字・小文字区別なし
                when /\A0[0-7]+#{integer_qualifier}/
            #				when /\A0[0-7]+(UL|ul)/, /\A0[0-7]+([UL]|[ul])/, /\A0[0-7]+/
                  @q << [:OCTAL_CONSTANT, Token.new($&, file, lineno, col)]
                  # 整数定数 ##! 大文字・小文字区別なし
                when /\A\d+#{integer_qualifier}/
            #			when /\A\d+(UL|ul)/, /\A\d+([UL]|[ul])/, /\A\d+/
                  @q << [:INTEGER_CONSTANT, Token.new($&, file, lineno, col)]
                  # 文字
            #		  		when /\A'(?:[^'\\]|\\.)'/
                when /\A'(?:[^'\\]|\\.){1,4}'/      # 1〜4文字まで可能とする
                  @q << [:CHARACTER_LITERAL, Token.new($&, file, lineno, col)]
                  # 文字列
            #		  		  "#include  #include #include \"../systask/logtask.cfg\"     #  最後の " 忘れ)で無限ループ
            #				  		when /\A"(?:[^"\\]+|\\.)*"/
                when /\A"(?:[^"\\]|\\.)*"/   # これはうまく行くようだ
                  @q << [:STRING_LITERAL, Token.new($&, file, lineno, col)]
                  # 行コメント
                when /\A\/\/.*$/
                  # # プリプロセッサディレクティブ(ファイル名)
                when /\A\/\*/
                  comment = true
                when /\A>>=/, /\A<<=/, /\A>>/,  /\A<</, /\A\|\|/, /\A\&\&/, /\A\-\>/, /\A\+\+/, /\A\-\-/
                  @q << [$&, Token.new($&, file, lineno, col)]
                when /\A\+=/, /\A\-=/, /\A\*=/, /\A\/=/, /\A%=/, /\A&=/, /\A\|=/, /\A\^=/, /\A\.\.\./
                  @q << [$&, Token.new($&, file, lineno, col)]
                when /\A\::/, /\A==/, /\A!=/, /\A>=/, /\A<=/
                  @q << [$&, Token.new($&, file, lineno, col)]
                when /\A./
                  @q << [$&, Token.new($&, file, lineno, col)]
                else
                  raise
                end
              end

              line = $'
              col += $&.length
            end ## untilの処理内容

          } ## ioに対する各処理
          @q << :EOF
        rescue => evar 	#例外が発生した時の処理、例外の内容を受け取る→例外補足
          error( evar )
      # p $@
        ensure #例外の発生有無にかかわらず最後に必ず実行する処理
          if io
            io.close
          end
        end
      }## 各ファイルに対する処理

      # 終了の印
      @q << nil

      @yydebug = true
      do_parse

    end
  end ##parse

  ##next_token
  def next_token

    token = @q.shift
    while token == :EOF       # ファイルが空のとき :EOF が連続する
      @type_name_list = {}
      token = @q.shift
      if token.instance_of? Array
	#STDERR.print "parsing #{@processing_file}\n" #ファイルのパスを表示
      end
    end

    if token then
      @@current_locale = token[1].locale

      case token[1].val
      when ";", ":", ",", "(", ")", "{", "}"
	set_no_type_name false
      when ".", "->"
	set_no_type_name true
      end


      # TYPE_NAME トークンへ置き換え
#      print( "#{token[0]} : #{token[1]}\n" ) #トークン表示
      if @b_no_type_name == false
	if token[0] == :IDENTIFIER #形名、関数名、変数名
#p token[1].val ###ここに変数名は無い
#p @current_function ###ここの@global_varに変数格納済み(R/Wカウント済み)
	  if @current_function && @current_function.is_local_var?( token[1].val )
	    # local 変数または引数
	  else
	    if @type_name_list[ token[1].val ] then
#print ("#{token[1]}\n")
	      token[0] = :TYPE_NAME
	    end
	  end
	end
      end

      #$debug = true ####
      if $b_print_all_token then     # 070107 token 無効時ここを通さないようした (through 対応 -d の時に例外発生) 
        locale = @@current_locale
        if token then
          print( "#{locale[0]}: line #{locale[1]} : #{token[0]} : '#{token[1].val}'\n" )
        else
          print( "#{locale[0]}: line #{locale[1]} : EOF\n" )
        end
      end
    end

    token
  end ##next_token

  ##on_error
  def on_error(t, v, vstack)
    if v == "$" then
      error( "Unexpected EOF" )
    else
      error( "syntax error near '#{v.val}'" )
    end

  end ##on_error

  def self.current_locale
    @@current_locale
  end

  @@n_error = 0
  @@n_warning = 0

  ##error
  # このメソッドは構文解析、意味解析からのみ呼出し可（コード生成でエラー発生は不適切）
  def error( msg )
    @@n_error += 1
    locale = @@current_locale

    if locale then
      puts "error: #{locale[0]}: line #{locale[1]} #{msg}"
      if locale[0] != nil && locale[0] != @processing_file
	puts "  #{locale[0]} is included from #{@processing_file}"
      end
    else
      puts "error: #{msg}"
    end
  end ##error

  # このメソッドは構文解析、意味解析からのみ呼出し可（コード生成でウォーニング発生は不適切）
  def warning( msg )
    @@n_warning += 1
    locale = @@current_locale
    puts "warning: #{locale[0]}: line #{locale[1]} #{msg}"
  end

  def self.get_n_error
    @@n_error
  end

  def self.get_n_warning
    @@n_warning
  end

  def set_no_type_name b_no_type_name
    # print "b_no_type_name=#{b_no_type_name}\n"
    @b_no_type_name = b_no_type_name
  end

...end C_parser.y.rb/module_eval...
##### State transition tables begin ###

clist = [
'289,99,100,101,102,103,105,-79,106,70,68,223,223,109,110,236,112,113',
'114,115,116,117,118,347,34,252,378,278,217,211,213,-79,87,217,236,222',
'338,38,331,305,38,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221,313',
'26,27,29,30,31,34,38,69,67,349,306,35,307,308,309,310,311,312,314,315',
'316,317,210,38,39,40,41,39,40,41,38,350,50,51,52,53,54,55,56,57,318',
'289,99,100,101,102,103,105,86,106,351,39,40,41,109,110,321,112,113,114',
'115,116,117,118,165,165,198,199,39,40,41,208,85,30,31,39,40,41,352,209',
'305,86,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221,320,26,27,29,30',
'31,34,384,164,234,257,306,35,307,308,309,310,311,312,314,315,316,317',
'373,38,236,34,236,230,198,199,236,35,50,51,52,53,54,55,56,57,318,289',
'99,100,101,102,103,105,372,106,340,229,192,193,109,110,235,112,113,114',
'115,116,117,118,236,374,256,387,39,40,41,175,249,236,176,236,177,178',
'179,180,305,96,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221,327,26',
'27,29,30,31,34,73,328,359,72,306,35,307,308,309,310,311,312,314,315',
'316,317,187,38,187,360,329,188,189,188,189,236,50,51,52,53,54,55,56',
'57,318,289,99,100,101,102,103,105,231,106,194,195,196,197,109,110,87',
'112,113,114,115,116,117,118,73,224,187,72,39,40,41,188,189,285,252,285',
'284,217,284,364,305,207,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221',
'206,26,27,29,30,31,34,194,195,196,197,306,35,307,308,309,310,311,312',
'314,315,316,317,369,38,194,195,196,197,192,193,190,191,50,51,52,53,54',
'55,56,57,318,289,99,100,101,102,103,105,371,106,192,193,192,193,109',
'110,203,112,113,114,115,116,117,118,190,191,190,191,39,40,41,192,193',
'204,205,202,201,375,236,376,305,200,8,9,10,13,14,15,16,17,18,19,20,21',
'22,23,24,221,3,26,27,29,30,31,34,168,96,166,149,306,35,307,308,309,310',
'311,312,314,315,316,317,386,38,141,388,97,96,391,89,393,394,50,51,52',
'53,54,55,56,57,318,289,99,100,101,102,103,105,84,106,79,397,201,200',
'109,110,202,112,113,114,115,116,117,118,203,58,332,337,39,40,41,339',
'343,344,330,346,,,,,305,,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24',
'221,,26,27,29,30,31,34,,,,,306,35,307,308,309,310,311,312,314,315,316',
'317,,38,,,,,,,,,50,51,52,53,54,55,56,57,318,289,99,100,101,102,103,105',
',106,,,,,109,110,,112,113,114,115,116,117,118,252,283,,217,39,40,41',
',,,,,38,,,,305,,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221,,26,27',
'29,30,31,,,,,,306,,307,308,309,310,311,312,314,315,316,317,39,40,41',
'238,,,,,,,50,51,52,53,54,55,56,57,318,289,99,100,101,102,103,105,,106',
',,,,109,110,,112,113,114,115,116,117,118,,239,240,241,242,243,244,245',
'246,247,248,,,,,,305,,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221',
',26,27,29,30,31,,,,,,306,,307,308,309,310,311,312,314,315,316,317,,',
',,,,,,,,50,51,52,53,54,55,56,57,318,289,99,100,101,102,103,105,,106',
',,,,109,110,,112,113,114,115,116,117,118,,,,,,,,,,,,,,,,,305,,8,9,10',
'13,14,15,16,17,18,19,20,21,22,23,24,221,342,26,27,29,30,31,,,,,,306',
',307,308,309,310,311,312,314,315,316,317,,,,,,,,,,,50,51,52,53,54,55',
'56,57,318,289,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115',
'116,117,118,,,,,,,,,,,,,,,,,305,,8,9,10,13,14,15,16,17,18,19,20,21,22',
'23,24,221,,26,27,29,30,31,,,,,,306,,307,308,309,310,311,312,314,315',
'316,317,,,,,,,,,,,50,51,52,53,54,55,56,57,318,289,99,100,101,102,103',
'105,,106,,,,,109,110,,112,113,114,115,116,117,118,,,,,,,,,,,,,,,,,305',
',8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,221,,26,27,29,30,31,,,,',
',306,,307,308,309,310,311,312,314,315,316,317,,,,,,,,,,,50,51,52,53',
'54,55,56,57,318,289,99,100,101,102,103,105,,106,,,,,109,110,,112,113',
'114,115,116,117,118,,,,,,,,,,,,,,,,,305,,8,9,10,13,14,15,16,17,18,19',
'20,21,22,23,24,221,,26,27,29,30,31,,,,,,306,,307,308,309,310,311,312',
'314,315,316,317,48,34,,,,,,35,,,50,51,52,53,54,55,56,57,318,38,,,,,',
',,,140,,,,,,,136,,,,,47,,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24',
',,26,27,29,30,31,39,40,41,,49,8,9,10,13,14,15,16,17,18,19,20,21,22,23',
'24,,,26,27,29,30,31,50,51,52,53,54,55,56,57,34,,,,,,35,,,,,,,,,,,,38',
'50,51,52,53,54,55,56,57,98,99,100,101,102,103,105,,106,,,,60,109,110',
',112,113,114,115,116,117,118,,,,,,,335,,,,,,,39,40,41,,,8,9,10,13,14',
'15,16,17,18,19,20,21,22,23,24,,,26,27,29,30,31,8,9,10,13,14,15,16,17',
'18,19,20,21,22,23,24,,,26,27,29,30,31,,,,,,50,51,52,53,54,55,56,57,',
',,,34,,,34,,,35,,,35,50,51,52,53,54,55,56,57,38,34,,38,,34,,213,283',
'34,217,35,,,,213,,,217,38,,60,,38,147,,,38,,,,,,,,,,,,,,,,,161,39,40',
'41,39,40,41,,,,,,,,,,,,,,39,40,41,,39,40,41,,39,40,41,98,99,100,101',
'102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,,,,,,,,,,',
',,,,,,,,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,,,26,27,29,30,31',
'98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117',
'118,,,,,,,,,,,,,,,,,,,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,,,26',
'27,29,30,31,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114',
'115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113',
'114,115,116,117,118,,,,,,,,,,,154,355,,,,,,8,9,10,13,14,15,16,17,18',
'19,20,21,22,23,24,,154,26,27,29,30,31,,,,279,8,9,10,13,14,15,16,17,18',
'19,20,21,22,23,24,,,26,27,29,30,31,,50,51,52,53,54,55,56,57,,,,,,,,',
',,,,,,,,,,50,51,52,53,54,55,56,57,8,9,10,13,14,15,16,17,18,19,20,21',
'22,23,24,,,26,27,29,30,31,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24',
',,26,27,29,30,31,,,,,,50,51,52,53,54,55,56,57,,,,,,,,,,,,,,,50,51,52',
'53,54,55,56,57,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114',
'115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113',
'114,115,116,117,118,,98,99,100,101,102,103,105,,106,154,,,,109,110,354',
'112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110',
',112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109',
'110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,',
'109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106',
',,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,',
'106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105',
',106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103',
'105,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102',
'103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101',
'102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100',
'101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99',
'100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98',
'99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118',
'98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117',
'118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116',
'117,118,98,99,100,101,102,103,105,,106,,286,,,109,110,,112,113,114,115',
'116,117,118,98,99,100,101,102,103,105,,106,,133,,,109,110,,112,113,114',
'115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113',
'114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112',
'113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,',
'112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110',
',112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109',
'110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,',
'109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106',
',,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,',
'106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105',
',106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103',
'185,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102',
'103,105,,106,,333,,,109,110,,112,113,114,115,116,117,118,98,99,100,101',
'102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100',
'101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98,99',
'100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116,117,118,98',
'99,100,101,102,103,181,,106,,,,,109,110,,112,113,114,115,116,117,118',
'98,99,100,101,102,103,181,,106,,,,,109,110,,112,113,114,115,116,117',
'118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115,116',
'117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114,115',
'116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113,114',
'115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112,113',
'114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,,112',
'113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110,',
'112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109,110',
',112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,,109',
'110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106,,,,',
'109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,,106',
',,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105,',
'106,,,,,109,110,,112,113,114,115,116,117,118,98,99,100,101,102,103,105',
',106,,,,,109,110,,112,113,114,115,116,117,118,8,9,10,13,14,15,16,17',
'18,19,20,21,22,23,24,,,26,27,29,30,31,8,9,10,13,14,15,16,17,18,19,20',
'21,22,23,24,,157,26,27,29,30,31,8,9,10,13,14,15,16,17,18,19,20,21,22',
'23,24,221,,26,27,29,30,31,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24',
',,26,27,29,30,31,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,,158,26',
'27,29,30,31,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,,91,26,27,29',
'30,31,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,,,26,27,29,30,31,8',
'9,10,13,14,15,16,17,18,19,20,21,22,23,24,221,,26,27,29,30,31,8,9,10',
'13,14,15,16,17,18,19,20,21,22,23,24,,228,26,27,29,30,31' ]
        racc_action_table = arr = ::Array.new(3121, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'221,221,221,221,221,221,221,62,221,28,25,146,288,221,221,277,221,221',
'221,221,221,221,221,310,212,173,368,209,173,137,212,62,62,212,368,146',
'288,173,277,221,77,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,367,37,28,25,312,221,367,221,221',
'221,221,221,221,221,221,221,221,137,367,173,173,173,77,77,77,38,314',
'221,221,221,221,221,221,221,221,221,378,378,378,378,378,378,378,59,378',
'315,37,37,37,378,378,225,378,378,378,378,378,378,378,94,167,272,272',
'367,367,367,135,59,38,38,38,38,38,316,135,378,377,378,378,378,378,378',
'378,378,378,378,378,378,378,378,378,378,378,225,378,378,378,378,378',
'35,377,94,167,178,378,35,378,378,378,378,378,378,378,378,378,378,362',
'35,353,32,290,160,125,125,362,32,378,378,378,378,378,378,378,378,378',
'394,394,394,394,394,394,394,353,394,290,160,267,267,394,394,169,394',
'394,394,394,394,394,394,169,363,177,382,35,35,35,108,171,363,108,382',
'108,108,108,108,394,165,394,394,394,394,394,394,394,394,394,394,394',
'394,394,394,394,394,253,394,394,394,394,394,230,33,253,334,33,394,230',
'394,394,394,394,394,394,394,394,394,394,263,230,262,336,255,263,263',
'262,262,255,394,394,394,394,394,394,394,394,394,397,397,397,397,397',
'397,397,163,397,124,124,124,124,397,397,151,397,397,397,397,397,397',
'397,71,149,121,71,230,230,230,121,121,216,251,281,216,251,281,345,397',
'134,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'132,397,397,397,397,397,223,270,270,270,270,397,223,397,397,397,397',
'397,397,397,397,397,397,348,223,271,271,271,271,123,123,122,122,397',
'397,397,397,397,397,397,397,397,386,386,386,386,386,386,386,350,386',
'269,269,266,266,386,386,129,386,386,386,386,386,386,386,265,265,264',
'264,223,223,223,268,268,130,130,128,127,364,365,366,386,126,386,386',
'386,386,386,386,386,386,386,386,386,386,386,386,386,386,1,386,386,386',
'386,386,219,104,97,96,84,386,219,386,386,386,386,386,386,386,386,386',
'386,380,219,74,383,70,69,387,66,389,392,386,386,386,386,386,386,386',
'386,386,349,349,349,349,349,349,349,57,349,46,395,274,273,349,349,275',
'349,349,349,349,349,349,349,276,3,282,287,219,219,219,289,306,307,258',
'309,,,,,349,,349,349,349,349,349,349,349,349,349,349,349,349,349,349',
'349,349,,349,349,349,349,349,86,,,,,349,86,349,349,349,349,349,349,349',
'349,349,349,,86,,,,,,,,,349,349,349,349,349,349,349,349,349,369,369',
'369,369,369,369,369,,369,,,,,369,369,,369,369,369,369,369,369,369,252',
'252,,252,86,86,86,,,,,,252,,,,369,,369,369,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,,369,369,369,369,369,,,,,,369,,369,369,369',
'369,369,369,369,369,369,369,252,252,252,170,,,,,,,369,369,369,369,369',
'369,369,369,369,373,373,373,373,373,373,373,,373,,,,,373,373,,373,373',
'373,373,373,373,373,,170,170,170,170,170,170,170,170,170,170,,,,,,373',
',373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,373,,373',
'373,373,373,373,,,,,,373,,373,373,373,373,373,373,373,373,373,373,,',
',,,,,,,,373,373,373,373,373,373,373,373,373,293,293,293,293,293,293',
'293,,293,,,,,293,293,,293,293,293,293,293,293,293,,,,,,,,,,,,,,,,,293',
',293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293',
'293,293,293,293,293,,,,,,293,,293,293,293,293,293,293,293,293,293,293',
',,,,,,,,,,293,293,293,293,293,293,293,293,293,374,374,374,374,374,374',
'374,,374,,,,,374,374,,374,374,374,374,374,374,374,,,,,,,,,,,,,,,,,374',
',374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,,374',
'374,374,374,374,,,,,,374,,374,374,374,374,374,374,374,374,374,374,,',
',,,,,,,,374,374,374,374,374,374,374,374,374,339,339,339,339,339,339',
'339,,339,,,,,339,339,,339,339,339,339,339,339,339,,,,,,,,,,,,,,,,,339',
',339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,339,,339',
'339,339,339,339,,,,,,339,,339,339,339,339,339,339,339,339,339,339,,',
',,,,,,,,339,339,339,339,339,339,339,339,339,308,308,308,308,308,308',
'308,,308,,,,,308,308,,308,308,308,308,308,308,308,,,,,,,,,,,,,,,,,308',
',308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,,308',
'308,308,308,308,,,,,,308,,308,308,308,308,308,308,308,308,308,308,2',
'2,,,,,,2,,,308,308,308,308,308,308,308,308,308,2,,,,,,,,,73,,,,,,,73',
',,,,2,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,,2,2,2,2,2,2,2,2,,2,73,73,73,73',
'73,73,73,73,73,73,73,73,73,73,73,,,73,73,73,73,73,2,2,2,2,2,2,2,2,291',
',,,,,291,,,,,,,,,,,,291,73,73,73,73,73,73,73,73,346,346,346,346,346',
'346,346,,346,,,,291,346,346,,346,346,346,346,346,346,346,,,,,,,285,',
',,,,,291,291,291,,,346,346,346,346,346,346,346,346,346,346,346,346,346',
'346,346,,,346,346,346,346,346,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,,,285,285,285,285,285,,,,,,346,346,346,346,346,346',
'346,346,,,,,4,,,83,,,4,,,83,285,285,285,285,285,285,285,285,4,213,,83',
',93,,213,213,139,213,93,,,,139,,,139,213,,4,,93,83,,,139,,,,,,,,,,,',
',,,,,93,4,4,4,83,83,83,,,,,,,,,,,,,,213,213,213,,93,93,93,,139,139,139',
'185,185,185,185,185,185,185,,185,,,,,185,185,,185,185,185,185,185,185',
'185,,,,,,,,,,,,,,,,,,,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,,,185,185,185,185,185,105,105,105,105,105,105,105,,105,',
',,,105,105,,105,105,105,105,105,105,105,,,,,,,,,,,,,,,,,,,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,105',
'321,321,321,321,321,321,321,,321,,,,,321,321,,321,321,321,321,321,321',
'321,87,87,87,87,87,87,87,,87,,,,,87,87,,87,87,87,87,87,87,87,,,,,,,',
',,,321,321,,,,,,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,,87,211,211,211,211,211,,,,211,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6',
',,6,6,6,6,6,,211,211,211,211,211,211,211,211,,,,,,,,,,,,,,,,,,,6,6,6',
'6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,7,7,7,7,7,5,5,5,5,5,5,5,5',
'5,5,5,5,5,5,5,,,5,5,5,5,5,,,,,,7,7,7,7,7,7,7,7,,,,,,,,,,,,,,,5,5,5,5',
'5,5,5,5,154,154,154,154,154,154,154,,154,,,,,154,154,,154,154,154,154',
'154,154,154,317,317,317,317,317,317,317,,317,,,,,317,317,,317,317,317',
'317,317,317,317,,347,347,347,347,347,347,347,,347,154,,,,347,347,317',
'347,347,347,347,347,347,347,193,193,193,193,193,193,193,,193,,,,,193',
'193,,193,193,193,193,193,193,193,194,194,194,194,194,194,194,,194,,',
',,194,194,,194,194,194,194,194,194,194,195,195,195,195,195,195,195,',
'195,,,,,195,195,,195,195,195,195,195,195,195,196,196,196,196,196,196',
'196,,196,,,,,196,196,,196,196,196,196,196,196,196,197,197,197,197,197',
'197,197,,197,,,,,197,197,,197,197,197,197,197,197,197,198,198,198,198',
'198,198,198,,198,,,,,198,198,,198,198,198,198,198,198,198,199,199,199',
'199,199,199,199,,199,,,,,199,199,,199,199,199,199,199,199,199,200,200',
'200,200,200,200,200,,200,,,,,200,200,,200,200,200,200,200,200,200,201',
'201,201,201,201,201,201,,201,,,,,201,201,,201,201,201,201,201,201,201',
'202,202,202,202,202,202,202,,202,,,,,202,202,,202,202,202,202,202,202',
'202,203,203,203,203,203,203,203,,203,,,,,203,203,,203,203,203,203,203',
'203,203,204,204,204,204,204,204,204,,204,,,,,204,204,,204,204,204,204',
'204,204,204,205,205,205,205,205,205,205,,205,,,,,205,205,,205,205,205',
'205,205,205,205,311,311,311,311,311,311,311,,311,,,,,311,311,,311,311',
'311,311,311,311,311,217,217,217,217,217,217,217,,217,,217,,,217,217',
',217,217,217,217,217,217,217,72,72,72,72,72,72,72,,72,,72,,,72,72,,72',
'72,72,72,72,72,72,384,384,384,384,384,384,384,,384,,,,,384,384,,384',
'384,384,384,384,384,384,388,388,388,388,388,388,388,,388,,,,,388,388',
',388,388,388,388,388,388,388,231,231,231,231,231,231,231,,231,,,,,231',
'231,,231,231,231,231,231,231,231,236,236,236,236,236,236,236,,236,,',
',,236,236,,236,236,236,236,236,236,236,237,237,237,237,237,237,237,',
'237,,,,,237,237,,237,237,237,237,237,237,237,249,249,249,249,249,249',
'249,,249,,,,,249,249,,249,249,249,249,249,249,249,393,393,393,393,393',
'393,393,,393,,,,,393,393,,393,393,393,393,393,393,393,344,344,344,344',
'344,344,344,,344,,,,,344,344,,344,344,344,344,344,344,344,343,343,343',
'343,343,343,343,,343,,,,,343,343,,343,343,343,343,343,343,343,112,112',
'112,112,112,112,112,,112,,,,,112,112,,112,112,112,112,112,112,112,284',
'284,284,284,284,284,284,,284,,284,,,284,284,,284,284,284,284,284,284',
'284,111,111,111,111,111,111,111,,111,,,,,111,111,,111,111,111,111,111',
'111,111,331,331,331,331,331,331,331,,331,,,,,331,331,,331,331,331,331',
'331,331,331,166,166,166,166,166,166,166,,166,,,,,166,166,,166,166,166',
'166,166,166,166,110,110,110,110,110,110,110,,110,,,,,110,110,,110,110',
'110,110,110,110,110,109,109,109,109,109,109,109,,109,,,,,109,109,,109',
'109,109,109,109,109,109,328,328,328,328,328,328,328,,328,,,,,328,328',
',328,328,328,328,328,328,328,175,175,175,175,175,175,175,,175,,,,,175',
'175,,175,175,175,175,175,175,175,176,176,176,176,176,176,176,,176,,',
',,176,176,,176,176,176,176,176,176,176,375,375,375,375,375,375,375,',
'375,,,,,375,375,,375,375,375,375,375,375,375,376,376,376,376,376,376',
'376,,376,,,,,376,376,,376,376,376,376,376,376,376,181,181,181,181,181',
'181,181,,181,,,,,181,181,,181,181,181,181,181,181,181,187,187,187,187',
'187,187,187,,187,,,,,187,187,,187,187,187,187,187,187,187,188,188,188',
'188,188,188,188,,188,,,,,188,188,,188,188,188,188,188,188,188,189,189',
'189,189,189,189,189,,189,,,,,189,189,,189,189,189,189,189,189,189,190',
'190,190,190,190,190,190,,190,,,,,190,190,,190,190,190,190,190,190,190',
'191,191,191,191,191,191,191,,191,,,,,191,191,,191,191,191,191,191,191',
'191,192,192,192,192,192,192,192,,192,,,,,192,192,,192,192,192,192,192',
'192,192,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,,,82,82,82,82,82',
'89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,,89,89,89,89,89,89,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,,143,143',
'143,143,143,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,,,49,49,49',
'49,49,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,,90,90,90,90,90,90',
'67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,,67,67,67,67,67,67,81,81',
'81,81,81,81,81,81,81,81,81,81,81,81,81,,,81,81,81,81,81,155,155,155',
'155,155,155,155,155,155,155,155,155,155,155,155,155,,155,155,155,155',
'155,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,,156',
'156,156,156,156,156' ]
        racc_action_check = arr = ::Array.new(3121, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   453,  1168,   519,  1395,  1741,  1662,  1719,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,     7,   nil,
   nil,   nil,   180,   254,   nil,   160,   nil,    44,    68,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   463,   nil,   nil,  2946,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   494,   nil,    89,
   nil,   nil,   -10,   nil,   nil,   nil,   425,  2990,   nil,   479,
   422,   312,  2254,  1195,   469,   nil,   nil,    20,   nil,   nil,
   nil,  3012,  2880,  1398,   461,   nil,   556,  1637,   nil,  2902,
  2968,   nil,   nil,  1418,   105,   nil,   420,   459,   nil,   nil,
   nil,   nil,   nil,   nil,   450,  1551,   nil,   nil,   220,  2622,
  2599,  2530,  2484,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   302,   364,   356,   277,   152,   417,   396,   394,   374,
   390,   nil,   342,   nil,   328,   120,   nil,    12,   nil,  1422,
   nil,   nil,   nil,  2924,   nil,   nil,    -6,   nil,   nil,   312,
   nil,   270,   nil,   nil,  1839,  3034,  3056,   nil,   nil,   nil,
   167,   nil,   nil,   264,   nil,   236,  2576,   106,   nil,   204,
   635,   220,   nil,    17,   nil,  2668,  2691,   221,   164,   nil,
   nil,  2760,   nil,   nil,   nil,  1488,   nil,  2783,  2806,  2829,
  2852,  2875,  2898,  1909,  1932,  1955,  1978,  2001,  2024,  2047,
  2070,  2093,  2116,  2139,  2162,  2185,   nil,   nil,   nil,    25,
   nil,  1636,    22,  1414,   nil,   nil,   321,  2231,   nil,   457,
   nil,    -2,   nil,   358,   nil,    97,   nil,   nil,   nil,   nil,
   259,  2323,   nil,   nil,   nil,   nil,  2346,  2369,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2392,
   nil,   322,   609,   246,   nil,   270,   nil,   nil,   519,   nil,
   nil,   nil,   260,   258,   400,   398,   380,   182,   399,   378,
   332,   350,    91,   488,   471,   474,   481,    -2,   nil,   nil,
   nil,   323,   511,   nil,  2507,  1315,   nil,   509,    -5,   485,
   166,  1266,   nil,   790,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   518,   519,  1087,   521,
    15,  2208,    27,   nil,    87,    67,    95,  1862,   nil,   nil,
   nil,  1614,   nil,   nil,   nil,   nil,   nil,   nil,  2645,   nil,
   nil,  2553,   nil,   nil,   252,   nil,   272,   nil,   nil,   988,
   nil,   nil,   nil,  2461,  2438,   263,  1293,  1886,   337,   493,
   362,   nil,   nil,   164,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   170,   213,   424,   416,   393,    61,    17,   592,
   nil,   nil,   nil,   691,   889,  2714,  2737,   122,    97,   nil,
   405,   nil,   215,   438,  2277,   nil,   394,   441,  2300,   443,
   nil,   nil,   476,  2415,   196,   496,   nil,   295,   nil ]

racc_action_default = [
  -177,  -251,    -1,  -251,  -251,   -71,   -72,   -73,   -81,   -82,
   -83,   -84,   -85,   -86,   -87,   -88,   -89,   -90,   -91,   -92,
   -93,   -94,   -95,   -96,   -97,  -251,  -103,  -104,  -251,  -121,
  -127,  -128,  -251,  -130,  -131,  -251,  -138,  -144,  -140,  -145,
  -146,  -147,  -176,  -178,  -179,  -180,  -188,  -182,  -183,  -251,
  -242,  -243,  -244,  -245,  -246,  -247,  -248,  -251,   399,  -251,
   -70,   -77,  -186,   -74,   -75,   -76,  -102,  -251,  -107,  -251,
  -120,  -129,  -251,  -251,  -251,  -139,  -144,  -141,  -142,  -181,
  -192,  -110,  -112,  -251,  -251,   -69,  -251,  -251,  -192,  -251,
  -251,  -100,  -105,  -251,  -251,  -122,  -125,  -251,    -2,    -3,
    -4,    -5,    -6,    -7,    -8,  -251,   -10,   -12,   -22,  -251,
  -251,  -251,  -251,   -28,   -29,   -30,   -31,   -32,   -33,   -34,
   -36,   -40,   -43,   -46,   -51,   -54,   -56,   -58,   -60,   -62,
   -64,   -68,  -251,  -134,  -251,  -251,  -137,  -148,  -151,  -155,
  -156,  -132,  -143,  -251,  -111,  -113,  -251,  -185,  -193,  -251,
   -78,   -79,   -80,  -171,  -251,  -251,  -251,  -101,   -99,  -106,
  -251,  -109,  -114,  -116,  -118,  -124,  -251,  -251,   -11,  -251,
   -34,  -251,   -66,  -158,  -229,   -19,  -251,  -251,  -251,   -17,
   -18,  -251,   -23,   -24,   -25,  -251,   -26,  -251,  -251,  -251,
  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,  -251,
  -251,  -251,  -251,  -251,  -251,  -251,  -133,  -135,  -136,  -251,
  -149,  -251,  -160,  -251,  -153,  -154,  -161,  -251,  -189,  -251,
  -191,  -251,  -184,  -251,  -249,  -251,  -174,  -187,   -98,  -108,
  -251,  -251,  -123,  -126,  -119,    -9,  -251,  -251,  -231,  -232,
  -233,  -234,  -235,  -236,  -237,  -238,  -239,  -240,  -241,  -251,
  -159,  -160,  -251,  -251,   -20,  -251,   -15,   -16,  -251,   -37,
   -38,   -39,   -41,   -42,   -44,   -45,   -47,   -48,   -49,   -50,
   -52,   -53,   -55,   -57,   -59,   -61,   -63,  -251,  -157,  -150,
  -152,  -162,  -251,  -168,  -251,  -251,  -164,  -251,  -251,    -2,
  -251,  -251,  -195,  -251,  -197,  -198,  -199,  -200,  -201,  -202,
  -203,  -204,  -205,  -206,  -207,  -208,  -251,  -251,  -251,  -251,
  -251,  -251,  -251,  -222,  -251,  -251,  -251,  -251,  -250,  -194,
  -172,  -251,  -115,  -117,   -67,  -230,   -35,   -13,  -251,   -14,
   -27,  -251,  -163,  -166,  -251,  -169,  -251,  -165,  -190,  -251,
  -228,  -196,  -221,  -251,  -251,  -251,  -216,  -251,  -251,  -251,
  -251,  -224,  -225,  -251,  -226,  -173,  -175,   -21,   -65,  -167,
  -170,  -218,  -251,  -251,  -251,  -215,  -251,  -251,  -251,  -251,
  -220,  -223,  -227,  -251,  -251,  -251,  -216,  -251,  -251,  -219,
  -209,  -211,  -251,  -251,  -216,  -217,  -251,  -251,  -216,  -251,
  -210,  -212,  -251,  -216,  -251,  -251,  -213,  -251,  -214 ]

racc_goto_table = [
     4,   169,   131,    63,    64,    65,   119,   134,   132,    78,
    71,   162,   152,   254,   146,   171,   184,   131,   215,   366,
   159,   119,    94,   281,   218,    90,   143,   266,   267,   268,
   269,   270,   271,   160,   155,   276,   227,   262,   263,   264,
   265,   275,   232,   182,   183,   119,   186,   156,   142,   383,
   167,   274,   250,   273,   272,   135,    75,   389,    46,    76,
    62,   392,   281,   280,   225,    42,   395,    43,    44,     1,
    88,   139,   255,    80,   324,   325,   293,   169,   253,   226,
     2,   169,    66,   237,   131,    83,   159,   150,   119,   377,
    45,    74,   259,   260,   261,   258,   131,   nil,   nil,   nil,
   119,   277,   233,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   212,   nil,   nil,   nil,   nil,   nil,   nil,   144,   145,   nil,
   nil,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   148,
   292,   173,   nil,   nil,   251,   nil,   nil,   131,   322,   163,
   288,   119,   nil,   287,   326,   nil,   nil,   nil,   nil,    77,
    81,   131,   nil,   nil,   nil,   119,   357,   323,   nil,   nil,
    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,   219,
   nil,   nil,   nil,   119,   212,   nil,   nil,   nil,    82,   nil,
    71,   219,    81,    81,   nil,   214,   nil,   nil,   nil,   nil,
    81,    81,    82,    82,   nil,   nil,   nil,   nil,   nil,   139,
    82,    82,   341,   353,   131,   nil,    81,   nil,   119,   336,
   334,   173,   nil,   251,   nil,   nil,    82,   345,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   362,
   363,   131,   365,   368,   nil,   119,   356,   348,   nil,   nil,
   nil,   131,   nil,   nil,    81,   119,   nil,   nil,   361,   nil,
   nil,   358,   nil,   nil,    82,   119,    81,    81,   370,    74,
   nil,   382,   365,   nil,   nil,   148,    82,    82,   nil,   319,
   365,   nil,   nil,   139,   365,   nil,   163,   nil,   379,   365,
   nil,   nil,   380,   381,   nil,   nil,    81,   385,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   390,    82,   nil,   nil,   nil,
   nil,   nil,   nil,   396,   nil,   nil,   398,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   367 ]

racc_goto_check = [
    26,     5,    23,    26,    26,    26,     9,    48,    24,    46,
    47,    42,    33,     8,    60,    12,    11,    23,    54,    77,
    39,     9,    44,    55,    62,    38,    61,    15,    15,    15,
    15,    16,    16,    41,    61,    21,    62,    13,    13,    14,
    14,    20,    45,     9,     9,     9,     9,    38,    46,    77,
    44,    19,    54,    18,    17,    49,    50,    77,    32,    51,
    32,    77,    55,    53,    56,    57,    77,    58,    59,     1,
    64,    26,     5,    65,     8,     8,    66,     5,     7,    33,
     2,     5,    37,    78,    23,    40,    39,    31,     9,    27,
    25,    32,    11,    11,    11,    12,    23,   nil,   nil,   nil,
     9,     5,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,    40,    40,   nil,
   nil,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,    32,
    67,    40,   nil,   nil,    46,   nil,   nil,    23,    42,    32,
    60,     9,   nil,    24,    11,   nil,   nil,   nil,   nil,    30,
    29,    23,   nil,   nil,   nil,     9,     8,    24,   nil,   nil,
    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,    40,
   nil,   nil,   nil,     9,    46,   nil,   nil,   nil,    30,   nil,
    47,    40,    29,    29,   nil,    32,   nil,   nil,   nil,   nil,
    29,    29,    30,    30,   nil,   nil,   nil,   nil,   nil,    26,
    30,    30,    67,     5,    23,   nil,    29,   nil,     9,    48,
    24,    40,   nil,    46,   nil,   nil,    30,    67,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,
     5,    23,     5,     5,   nil,     9,    33,    24,   nil,   nil,
   nil,    23,   nil,   nil,    29,     9,   nil,   nil,    67,   nil,
   nil,    23,   nil,   nil,    30,     9,    29,    29,    67,    32,
   nil,     5,     5,   nil,   nil,    32,    30,    30,   nil,    32,
     5,   nil,   nil,    26,     5,   nil,    32,   nil,    67,     5,
   nil,   nil,    67,    67,   nil,   nil,    29,    67,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    67,    30,   nil,   nil,   nil,
   nil,   nil,   nil,    67,   nil,   nil,    67,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    69,    80,   nil,   nil,  -104,   nil,   -97,  -162,   -66,
   nil,   -95,   -90,  -153,  -153,  -167,  -167,  -146,  -148,  -151,
  -162,  -169,   nil,   -70,   -64,    88,    -2,  -278,   nil,   111,
   121,     1,    56,   -75,   nil,   nil,   nil,    57,   -42,   -70,
    36,   -60,   -82,   nil,   -47,  -123,   -29,   -22,   -66,   -18,
    19,    22,   nil,  -148,  -121,  -189,   -90,    63,    65,    66,
   -69,   -54,  -119,   nil,     8,    27,  -145,   -81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -327,   -87 ]

racc_goto_default = [
   nil,   nil,   nil,   107,   104,   290,   108,   nil,   172,   170,
   111,   120,   nil,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   174,   153,   303,   291,    59,     5,     6,
     7,    61,   151,   nil,    11,    12,    25,   nil,   nil,    92,
    93,   nil,   nil,    28,   nil,    95,    32,    33,   nil,   nil,
    36,    37,   137,   138,   282,   216,   nil,   nil,   nil,   nil,
   nil,   nil,   300,   220,   nil,   nil,   nil,   nil,   294,   295,
   296,   297,   298,   299,   301,   302,   304,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 102, :_reduce_none,
  1, 104, :_reduce_2,
  1, 104, :_reduce_3,
  1, 104, :_reduce_4,
  1, 104, :_reduce_5,
  1, 104, :_reduce_6,
  1, 104, :_reduce_7,
  1, 104, :_reduce_8,
  3, 104, :_reduce_9,
  1, 105, :_reduce_none,
  2, 105, :_reduce_none,
  1, 107, :_reduce_12,
  4, 107, :_reduce_13,
  4, 107, :_reduce_14,
  3, 107, :_reduce_15,
  3, 107, :_reduce_16,
  2, 107, :_reduce_17,
  2, 107, :_reduce_18,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  3, 108, :_reduce_none,
  1, 110, :_reduce_22,
  2, 110, :_reduce_23,
  2, 110, :_reduce_24,
  2, 110, :_reduce_25,
  2, 110, :_reduce_26,
  4, 110, :_reduce_27,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 112, :_reduce_none,
  4, 112, :_reduce_35,
  1, 114, :_reduce_none,
  3, 114, :_reduce_none,
  3, 114, :_reduce_none,
  3, 114, :_reduce_none,
  1, 115, :_reduce_none,
  3, 115, :_reduce_none,
  3, 115, :_reduce_none,
  1, 116, :_reduce_none,
  3, 116, :_reduce_none,
  3, 116, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_none,
  3, 117, :_reduce_none,
  3, 117, :_reduce_none,
  3, 117, :_reduce_none,
  1, 118, :_reduce_none,
  3, 118, :_reduce_none,
  3, 118, :_reduce_none,
  1, 119, :_reduce_none,
  3, 119, :_reduce_none,
  1, 120, :_reduce_none,
  3, 120, :_reduce_none,
  1, 121, :_reduce_none,
  3, 121, :_reduce_none,
  1, 122, :_reduce_none,
  3, 122, :_reduce_none,
  1, 123, :_reduce_none,
  3, 123, :_reduce_none,
  1, 124, :_reduce_none,
  5, 124, :_reduce_none,
  1, 106, :_reduce_none,
  3, 106, :_reduce_none,
  1, 125, :_reduce_none,
  3, 126, :_reduce_69,
  2, 126, :_reduce_70,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  2, 127, :_reduce_none,
  2, 127, :_reduce_none,
  2, 127, :_reduce_none,
  1, 128, :_reduce_77,
  3, 128, :_reduce_78,
  1, 132, :_reduce_79,
  3, 132, :_reduce_80,
  1, 130, :_reduce_81,
  1, 130, :_reduce_82,
  1, 130, :_reduce_83,
  1, 130, :_reduce_none,
  1, 130, :_reduce_85,
  1, 130, :_reduce_86,
  1, 130, :_reduce_87,
  1, 130, :_reduce_88,
  1, 130, :_reduce_89,
  1, 130, :_reduce_90,
  1, 130, :_reduce_91,
  1, 130, :_reduce_92,
  1, 130, :_reduce_93,
  1, 130, :_reduce_94,
  1, 130, :_reduce_95,
  1, 130, :_reduce_96,
  1, 130, :_reduce_97,
  5, 135, :_reduce_none,
  4, 135, :_reduce_none,
  3, 135, :_reduce_none,
  4, 135, :_reduce_none,
  2, 135, :_reduce_none,
  1, 137, :_reduce_103,
  1, 137, :_reduce_104,
  1, 139, :_reduce_none,
  2, 139, :_reduce_none,
  1, 138, :_reduce_none,
  3, 140, :_reduce_none,
  2, 140, :_reduce_none,
  1, 141, :_reduce_none,
  2, 141, :_reduce_none,
  1, 141, :_reduce_none,
  2, 141, :_reduce_none,
  1, 142, :_reduce_none,
  3, 142, :_reduce_none,
  1, 143, :_reduce_none,
  3, 143, :_reduce_none,
  4, 136, :_reduce_none,
  5, 136, :_reduce_none,
  2, 136, :_reduce_none,
  1, 144, :_reduce_none,
  1, 145, :_reduce_none,
  3, 145, :_reduce_none,
  2, 145, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  2, 133, :_reduce_129,
  1, 133, :_reduce_130,
  1, 148, :_reduce_131,
  3, 148, :_reduce_132,
  4, 148, :_reduce_133,
  3, 148, :_reduce_134,
  4, 148, :_reduce_135,
  4, 148, :_reduce_136,
  3, 148, :_reduce_137,
  1, 147, :_reduce_none,
  2, 147, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  2, 151, :_reduce_none,
  3, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 149, :_reduce_148,
  2, 149, :_reduce_149,
  3, 149, :_reduce_150,
  1, 153, :_reduce_151,
  3, 153, :_reduce_152,
  2, 154, :_reduce_153,
  2, 154, :_reduce_154,
  1, 154, :_reduce_155,
  1, 150, :_reduce_none,
  3, 150, :_reduce_none,
  1, 113, :_reduce_none,
  2, 113, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_none,
  3, 156, :_reduce_none,
  2, 156, :_reduce_none,
  3, 156, :_reduce_none,
  3, 156, :_reduce_none,
  4, 156, :_reduce_none,
  2, 156, :_reduce_none,
  3, 156, :_reduce_none,
  4, 156, :_reduce_none,
  1, 134, :_reduce_none,
  3, 134, :_reduce_none,
  4, 134, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_none,
  2, 103, :_reduce_none,
  0, 103, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  4, 159, :_reduce_184,
  3, 159, :_reduce_185,
  0, 165, :_reduce_186,
  5, 160, :_reduce_187,
  0, 166, :_reduce_188,
  4, 160, :_reduce_189,
  3, 164, :_reduce_none,
  2, 162, :_reduce_none,
  0, 162, :_reduce_none,
  1, 161, :_reduce_193,
  3, 161, :_reduce_194,
  1, 167, :_reduce_none,
  2, 167, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  5, 169, :_reduce_none,
  7, 169, :_reduce_none,
  5, 170, :_reduce_none,
  7, 171, :_reduce_none,
  9, 172, :_reduce_none,
  10, 172, :_reduce_none,
  1, 178, :_reduce_none,
  0, 178, :_reduce_none,
  5, 173, :_reduce_none,
  3, 174, :_reduce_none,
  4, 174, :_reduce_none,
  3, 174, :_reduce_none,
  3, 163, :_reduce_none,
  2, 163, :_reduce_none,
  3, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  2, 175, :_reduce_none,
  3, 175, :_reduce_none,
  2, 176, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_230,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  4, 129, :_reduce_none,
  1, 177, :_reduce_250 ]

racc_reduce_n = 251

racc_shift_n = 399

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER_CONSTANT => 3,
  :FLOATING_CONSTANT => 4,
  :OCTAL_CONSTANT => 5,
  :HEX_CONSTANT => 6,
  :CHARACTER_LITERAL => 7,
  "(" => 8,
  ")" => 9,
  :STRING_LITERAL => 10,
  "[" => 11,
  "]" => 12,
  "." => 13,
  "->" => 14,
  "++" => 15,
  "--" => 16,
  "," => 17,
  :SIZEOF => 18,
  "&" => 19,
  "*" => 20,
  "+" => 21,
  "-" => 22,
  "~" => 23,
  "!" => 24,
  "/" => 25,
  "%" => 26,
  "<<" => 27,
  ">>" => 28,
  "<" => 29,
  ">" => 30,
  "<=" => 31,
  ">=" => 32,
  "==" => 33,
  "!=" => 34,
  "^" => 35,
  "|" => 36,
  "&&" => 37,
  "||" => 38,
  "?" => 39,
  ":" => 40,
  ";" => 41,
  "=" => 42,
  :VOID => 43,
  :FLOAT => 44,
  :DOUBLE => 45,
  :TYPE_NAME => 46,
  :CHAR => 47,
  :SHORT => 48,
  :INT => 49,
  :LONG => 50,
  :SIGNED => 51,
  :UNSIGNED => 52,
  :__INT8 => 53,
  :__INT16 => 54,
  :__INT32 => 55,
  :__INT64 => 56,
  :__BOOL => 57,
  "{" => 58,
  "}" => 59,
  :STRUCT => 60,
  :UNION => 61,
  :ENUM => 62,
  :CONST => 63,
  :VOLATILE => 64,
  :__CDECL => 65,
  :__STDCALL => 66,
  :__FASTCALL => 67,
  "..." => 68,
  :TYPEDEF => 69,
  :IF => 70,
  :ELSE => 71,
  :WHILE => 72,
  :DO => 73,
  :FOR => 74,
  :SWITCH => 75,
  :CASE => 76,
  :DEFAULT => 77,
  :GOTO => 78,
  :CONTINUE => 79,
  :BREAK => 80,
  :RETURN => 81,
  "+=" => 82,
  "-=" => 83,
  "*=" => 84,
  "/=" => 85,
  "%=" => 86,
  "<<=" => 87,
  ">>=" => 88,
  "&=" => 89,
  "|=" => 90,
  "^=" => 91,
  :__INLINE__ => 92,
  :__FORCEINLINE => 93,
  :INLINE => 94,
  :EXTERN => 95,
  :STATIC => 96,
  :AUTO => 97,
  :REGISTER => 98,
  :__DECLSPEC => 99,
  :_ASM => 100 }

racc_nt_base = 101

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER_CONSTANT",
  "FLOATING_CONSTANT",
  "OCTAL_CONSTANT",
  "HEX_CONSTANT",
  "CHARACTER_LITERAL",
  "\"(\"",
  "\")\"",
  "STRING_LITERAL",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "\"->\"",
  "\"++\"",
  "\"--\"",
  "\",\"",
  "SIZEOF",
  "\"&\"",
  "\"*\"",
  "\"+\"",
  "\"-\"",
  "\"~\"",
  "\"!\"",
  "\"/\"",
  "\"%\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"?\"",
  "\":\"",
  "\";\"",
  "\"=\"",
  "VOID",
  "FLOAT",
  "DOUBLE",
  "TYPE_NAME",
  "CHAR",
  "SHORT",
  "INT",
  "LONG",
  "SIGNED",
  "UNSIGNED",
  "__INT8",
  "__INT16",
  "__INT32",
  "__INT64",
  "__BOOL",
  "\"{\"",
  "\"}\"",
  "STRUCT",
  "UNION",
  "ENUM",
  "CONST",
  "VOLATILE",
  "__CDECL",
  "__STDCALL",
  "__FASTCALL",
  "\"...\"",
  "TYPEDEF",
  "IF",
  "ELSE",
  "WHILE",
  "DO",
  "FOR",
  "SWITCH",
  "CASE",
  "DEFAULT",
  "GOTO",
  "CONTINUE",
  "BREAK",
  "RETURN",
  "\"+=\"",
  "\"-=\"",
  "\"*=\"",
  "\"/=\"",
  "\"%=\"",
  "\"<<=\"",
  "\">>=\"",
  "\"&=\"",
  "\"|=\"",
  "\"^=\"",
  "__INLINE__",
  "__FORCEINLINE",
  "INLINE",
  "EXTERN",
  "STATIC",
  "AUTO",
  "REGISTER",
  "__DECLSPEC",
  "_ASM",
  "$start",
  "all",
  "C_parser",
  "primary_expression",
  "string_literal_list",
  "expression",
  "postfix_expression",
  "argument_list",
  "assignment_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "type_name",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "conditional_expression",
  "constant_expression",
  "declaration",
  "declaration_specifiers",
  "init_declarator_list",
  "storage_class",
  "type_specifier",
  "type_qualifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_or_union_specifier",
  "enum_specifier",
  "struct_or_union",
  "struct_tag",
  "struct_declaration_list",
  "struct_declaration",
  "type_specifier_qualifier_list",
  "struct_declarator_list",
  "struct_declarator",
  "enum_type",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "parameter_type_list",
  "identifier_list",
  "pointer0",
  "call_convention",
  "parameter_list",
  "parameter_declaration",
  "abstract_declarator",
  "direct_abstract_declarator",
  "initializer_list",
  "statement",
  "typedef",
  "func_def",
  "declarator_list",
  "kr_param_list",
  "compoundstatement",
  "kr_param",
  "@1",
  "@2",
  "infunc_statement_list",
  "infunc_statement",
  "ifstatement",
  "whilestatement",
  "dowhilestatement",
  "forstatement",
  "switchstatement",
  "labelstatement",
  "gotostatement",
  "expressionstatement",
  "asm_statement",
  "expression_or_empty",
  "assignment_operator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 49)
  def _reduce_2(val, _values, result)
     result = val[0].val 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 50)
  def _reduce_3(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 51)
  def _reduce_4(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 52)
  def _reduce_5(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 53)
  def _reduce_6(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 54)
  def _reduce_7(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 55)
  def _reduce_8(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 58)
  def _reduce_9(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 67)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 71)
  def _reduce_13(val, _values, result)
    ####ここのvalにはセル内部変数は無い
			if val[0]
			  if @current_function
			    @current_function.ref_func val[0].to_sym
			  end
			  result = "#{val[0]}()".to_sym
			end
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 79)
  def _reduce_14(val, _values, result)
     result = "#{val[0]}[]" 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 80)
  def _reduce_15(val, _values, result)
     result = "#{val[0]}.#{val[2]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 81)
  def _reduce_16(val, _values, result)
     result = "#{val[0]}->#{val[2]}" 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 82)
  def _reduce_17(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 83)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 96)
  def _reduce_22(val, _values, result)
    #p val[0] #######ここでglobal変数を持つ
			if val[0]
			  if /\(\)$/ =~ val[0].to_s then
			    # () で終わっているものは関数として報告済み
			  else
			    if @current_function
			      @current_function.ref_var val[0].to_sym ###########
			      result =  val[0].to_sym
#p result ####global_var
			    end
			  end
			end
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 109)
  def _reduce_23(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 110)
  def _reduce_24(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 111)
  def _reduce_25(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 112)
  def _reduce_26(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 113)
  def _reduce_27(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 125)
  def _reduce_35(val, _values, result)
     result = val[3] 
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 219)
  def _reduce_69(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 220)
  def _reduce_70(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 231)
  def _reduce_77(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 234)
  def _reduce_78(val, _values, result)
    			result << val[2]
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 238)
  def _reduce_79(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 239)
  def _reduce_80(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 242)
  def _reduce_81(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 243)
  def _reduce_82(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 244)
  def _reduce_83(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 246)
  def _reduce_85(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 247)
  def _reduce_86(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 248)
  def _reduce_87(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 249)
  def _reduce_88(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 250)
  def _reduce_89(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 251)
  def _reduce_90(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 252)
  def _reduce_91(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 253)
  def _reduce_92(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 254)
  def _reduce_93(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 255)
  def _reduce_94(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 256)
  def _reduce_95(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 257)
  def _reduce_96(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 258)
  def _reduce_97(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 269)
  def _reduce_103(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 270)
  def _reduce_104(val, _values, result)
     set_no_type_name true 
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 323)
  def _reduce_129(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 324)
  def _reduce_130(val, _values, result)
     result = val[0]  
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 327)
  def _reduce_131(val, _values, result)
     result = val[0].val 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 328)
  def _reduce_132(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 329)
  def _reduce_133(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 330)
  def _reduce_134(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 331)
  def _reduce_135(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 332)
  def _reduce_136(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 333)
  def _reduce_137(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 351)
  def _reduce_148(val, _values, result)
     TCFlow::Function.param_list val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 352)
  def _reduce_149(val, _values, result)
     TCFlow::Function.param_list val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 353)
  def _reduce_150(val, _values, result)
     TCFlow::Function.param_list val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 358)
  def _reduce_151(val, _values, result)
    			if val[0]
			  result = [val[0]]
			else
			  result = nil
			end
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 366)
  def _reduce_152(val, _values, result)
    			if val[0] && val[2]
			  result << val[2]
			elsif val[2]
			  result = [ val[2] ]   # これは文法エラー時しかありえない
			end
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 377)
  def _reduce_153(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 379)
  def _reduce_154(val, _values, result)
     result = nil	
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 381)
  def _reduce_155(val, _values, result)
     result = nil	
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 439)
  def _reduce_184(val, _values, result)
    			val[2].each{ |t|
				# print( "typdef: #{t.to_s}\n" )
				@type_name_list[ t.to_sym ] = t
			}
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 444)
  def _reduce_185(val, _values, result)
     error( "maybe typedef duplicate, ignored" ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 451)
  def _reduce_186(val, _values, result)
    			@current_function = TCFlow::Function.new @@current_locale
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 455)
  def _reduce_187(val, _values, result)
    			@current_function.set_name val[1]
#p val[1]
			@current_function = nil
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 461)
  def _reduce_188(val, _values, result)
    			@current_function = TCFlow::Function.new @@current_locale
		
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 465)
  def _reduce_189(val, _values, result)
    			@current_function.set_name val[0]
#p val[0]
			@current_function = nil
		
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 477)
  def _reduce_193(val, _values, result)
      result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'C_parser.y.rb', 478)
  def _reduce_194(val, _values, result)
      result << val[2] 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 548)
  def _reduce_230(val, _values, result)
    #p val[0] ###書き込みされる変数群
			if val[0]
			  if /\(\)$/ =~ val[0].to_s then
			    # () で終わっているものは関数, 通常来ないはず
			  else
			    if @current_function
####p @current_function #### global_var選別後
			      @current_function.ref_var( val[0].to_sym, true ) ##### R/Wカウント
			      result =  val[0].to_sym
			    end
			  end
			end
		
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

module_eval(<<'.,.,', 'C_parser.y.rb', 587)
  def _reduce_250(val, _values, result)
            while true
          # ';' が表れるまで、トークンを読み飛ばす。
          # gcc の構文拡張に対応すべきだが、単純な実装として、';' まで読み飛ばす。
          # トークン単位で読み飛ばしているので、文字列やコメント内の ';' は対象にならない。
          token = next_token
          if token[1].val == ";"
            break
          end
		      # p "skip: #{token[1].val}" 
        end
      
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TCFLOW_Cparser




class Token
# @parameter
#	SIZE_IS, STRING, COUNT_IS : expression
#	SEND, RECEIVE : string ( IDENTIFIER )

  attr_accessor :val, :file, :lineno, :col

  def initialize(val, file, lineno, col)
    @val = val
    @file = file
    @lineno = lineno
    @col = col

  end

  def to_s
    @val.to_s
  end

  def to_sym
    @val.to_sym
  end

  def get_name
    @val
  end

  def set_parameter( parameter )
    @parameter = parameter
  end

  def scan(*arg, &block)
    val.to_s.scan(*arg, &block)
  end

  def to_i
    if @val.is_a? Integer
      @val.to_i
    else
      raise TypeError
    end
  end

  def locale
    [@file, @lineno, @col]
  end

  def eql?(other)
    if other.is_a? Symbol
      @val == other
    elsif other.is_a? Token
      @val == other.val
    elsif other.is_a? String
      @val.to_s == other
    else
      raise ArgumentError
    end
  end

  alias == eql?

  def <=>(other)
    if other.class == Token
      if @val.is_a? Integer
        @val <=> other.val
      elsif @val.is_a? Symbol
        @val.to_s <=> other.val.to_s
      else
        raise ArgumentError
      end
    else
      raise ArgumentError
    end
  end

  def show_tree( indent )
    indent.times { print "  " }
    print "#{@val}\n"
  end

end # class C_Parser
