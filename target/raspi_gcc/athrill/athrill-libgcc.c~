#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

//#include "athrill_syscall.h"
#include "ev3api.h"

unsigned int athrill_device_func_call __attribute__ ((section(".athrill_device_section")));

#define _PARAMS(args) args

// Special FD Handling
// (to convert one fd to in or out for bluetooth )
// index is fd for out. if the value is 0, it means the fd is normal file



int _close_r _PARAMS ((struct _reent *unused, int fd))
{
	return athrill_newlib_close_r(fd);
}

off_t _lseek_r _PARAMS ((struct _reent *unused, int fd, _off_t offset, int whence))
{
	// TODO: how to treat when pipe
	return (_off_t) athrill_newlib_lseek_r(fd,offset,whence);
}

int _open_r _PARAMS ((struct _reent *unused, char *file_name, int flags, int mode))
{
	return athrill_newlib_open_r(file_name, flags, mode);
}

ssize_t _read_r _PARAMS ((struct _reent *unused, int fd, void *buf, size_t size))
{
	// if read returns EAGAIN, repeat again after 10msec
	_ssize_t ret;	
	while ( (ret = athrill_newlib_read_r(fd, buf, size)) == -1 ) {
		if ( errno != SYS_API_ERR_AGAIN && errno != 0 ) break;
		tslp_tsk(100*1000); // 100msec(T.B.D.)
	}
	
	return ret;	
}

ssize_t _write_r _PARAMS ((struct _reent *unused, int fd, const void *buf, size_t size))
{
	return (_ssize_t)athrill_newlib_write_r(fd, buf, size);
}



ER filesys_opendir(const char *path) {
		
	return athrill_ev3_opendir((sys_addr)path);
}

ER filesys_readdir(ID dirid, fatfs_filinfo_t *p_fileinfo) 
{

	return athrill_ev3_readdir(dirid, p_fileinfo);
}

ER filesys_closedir(ID dirid) 
{

	return athrill_ev3_closedir(dirid);

}

ER filesys_serial_open(sys_serial_port_t port)
{
	int fd = 0; // Default is stdout
	sys_int32 sys_port;
	
	if ( port == SYS_EV3_SERIAL_UART ) {
		sys_port = SYS_SERIAL_UART;
	} else if ( port == SYS_EV3_SERIAL_BT ) {
		sys_port = SYS_SERIAL_BT;
	} else {
		return -1;
	}

	fd = athrill_ev3_serial_open(sys_port);

	return fd;
}


